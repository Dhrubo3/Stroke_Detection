{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":1882037,"sourceType":"datasetVersion","datasetId":1120859}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os, re\n\ncsv_paths = []\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        if filename.lower().endswith('.csv'):\n            csv_paths.append(os.path.join(dirname, filename))\n\nif not csv_paths:\n    raise FileNotFoundError(\"No CSV files found under /kaggle/input.\")\n\ndef pick_csv(paths):\n    train_like = [p for p in paths if re.search(r'train|training', os.path.basename(p), re.I)]\n    if train_like:\n        return train_like[0]\n    return max(paths, key=lambda p: os.path.getsize(p))\n\nCSV_PATH = pick_csv(csv_paths)\nprint(f\"Using CSV: {CSV_PATH}\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:24:49.775753Z","iopub.execute_input":"2025-08-21T21:24:49.776471Z","iopub.status.idle":"2025-08-21T21:24:49.795404Z","shell.execute_reply.started":"2025-08-21T21:24:49.776440Z","shell.execute_reply":"2025-08-21T21:24:49.794710Z"}},"outputs":[{"name":"stdout","text":"Using CSV: /kaggle/input/healthcare-dataset-stroke-data.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!pip -q install lightgbm pytorch-tabnet","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:24:49.796551Z","iopub.execute_input":"2025-08-21T21:24:49.796763Z","iopub.status.idle":"2025-08-21T21:25:58.506834Z","shell.execute_reply.started":"2025-08-21T21:24:49.796746Z","shell.execute_reply":"2025-08-21T21:25:58.505921Z"}},"outputs":[{"name":"stdout","text":"\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.5/44.5 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m91.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m0:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m66.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m54.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m30.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m72.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv(CSV_PATH, low_memory=False)\nprint(f\"Shape: {df.shape}\")\nprint(\"Columns:\", list(df.columns))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:25:58.507975Z","iopub.execute_input":"2025-08-21T21:25:58.508411Z","iopub.status.idle":"2025-08-21T21:25:58.833665Z","shell.execute_reply.started":"2025-08-21T21:25:58.508375Z","shell.execute_reply":"2025-08-21T21:25:58.833015Z"}},"outputs":[{"name":"stdout","text":"Shape: (5110, 12)\nColumns: ['id', 'gender', 'age', 'hypertension', 'heart_disease', 'ever_married', 'work_type', 'Residence_type', 'avg_glucose_level', 'bmi', 'smoking_status', 'stroke']\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"common_targets = ['target', 'label', 'class', 'outcome', 'y', 'is_fraud', 'default']\ntarget_col = None\n\nfor ct in common_targets:\n    if ct in df.columns:\n        target_col = ct\n        break\n\nif target_col is None:\n    candidates = []\n    for c in df.columns:\n        nunq = df[c].nunique(dropna=True)\n        if 2 <= nunq <= 20 and nunq < 0.9 * len(df):\n            candidates.append((c, nunq))\n    if candidates:\n        candidates.sort(key=lambda t: t[1])\n        target_col = candidates[0][0]\n\nif target_col is None:\n    last = df.columns[-1]\n    nunq_last = df[last].nunique(dropna=True)\n    if nunq_last < 0.9 * len(df):\n        target_col = last\n\nif target_col is None:\n    raise ValueError(\"Could not infer a target column. Set it manually, e.g. target_col = 'your_target'.\")\n\nprint(f\"Inferred target column: {target_col}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:25:58.835313Z","iopub.execute_input":"2025-08-21T21:25:58.835546Z","iopub.status.idle":"2025-08-21T21:25:58.853324Z","shell.execute_reply.started":"2025-08-21T21:25:58.835527Z","shell.execute_reply":"2025-08-21T21:25:58.852618Z"}},"outputs":[{"name":"stdout","text":"Inferred target column: hypertension\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import numpy as np\n\ny_raw = df[target_col]\nX_raw = df.drop(columns=[target_col])\n\nif y_raw.dtype == 'O' or str(y_raw.dtype).startswith('category'):\n    y = y_raw.astype('category').cat.codes\nelse:\n    y = y_raw.copy()\n\nlen(X_raw), len(y)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:25:58.853946Z","iopub.execute_input":"2025-08-21T21:25:58.854160Z","iopub.status.idle":"2025-08-21T21:25:59.481924Z","shell.execute_reply.started":"2025-08-21T21:25:58.854141Z","shell.execute_reply":"2025-08-21T21:25:59.481267Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"(5110, 5110)"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"num_cols = X_raw.select_dtypes(include=[np.number]).columns.tolist()\ncat_cols = [c for c in X_raw.columns if c not in num_cols]\n\nX_num = X_raw[num_cols].copy()\nfor c in num_cols:\n    if X_num[c].isna().any():\n        X_num[c] = X_num[c].fillna(X_num[c].median())\n\nX_cat = X_raw[cat_cols].copy()\nfor c in cat_cols:\n    if X_cat[c].isna().any():\n        mode_val = X_cat[c].mode()\n        X_cat[c] = X_cat[c].fillna(mode_val.iloc[0] if not mode_val.empty else \"missing\")\n\nif cat_cols:\n    X_cat = pd.get_dummies(X_cat, drop_first=False)\n    X = pd.concat([X_num, X_cat], axis=1)\nelse:\n    X = X_num\n\nX.shape\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:25:59.482869Z","iopub.execute_input":"2025-08-21T21:25:59.483130Z","iopub.status.idle":"2025-08-21T21:25:59.502658Z","shell.execute_reply.started":"2025-08-21T21:25:59.483105Z","shell.execute_reply":"2025-08-21T21:25:59.502114Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(5110, 22)"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"assert len(X) == len(y), \"X and y length mismatch.\"\nis_multiclass = len(np.unique(y)) > 2\nprint(f\"Final X shape: {X.shape}, y shape: {y.shape}, is_multiclass={is_multiclass}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:25:59.503295Z","iopub.execute_input":"2025-08-21T21:25:59.503505Z","iopub.status.idle":"2025-08-21T21:25:59.508029Z","shell.execute_reply.started":"2025-08-21T21:25:59.503481Z","shell.execute_reply":"2025-08-21T21:25:59.507532Z"}},"outputs":[{"name":"stdout","text":"Final X shape: (5110, 22), y shape: (5110,), is_multiclass=False\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nRSEED = 42\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, stratify=y, random_state=RSEED\n)\n\n# TabNet prefers float32\nimport numpy as np\nX_train_np = np.asarray(X_train, dtype=np.float32)\nX_test_np  = np.asarray(X_test, dtype=np.float32)\ny_train_np = np.asarray(y_train)\ny_test_np  = np.asarray(y_test)\n\nis_multiclass = len(np.unique(y_train_np)) > 2\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:25:59.508763Z","iopub.execute_input":"2025-08-21T21:25:59.509007Z","iopub.status.idle":"2025-08-21T21:26:00.114431Z","shell.execute_reply.started":"2025-08-21T21:25:59.508982Z","shell.execute_reply":"2025-08-21T21:26:00.113654Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Wrapper so sklearn treats TabNet as a proper classifier during validation/cloning\nfrom pytorch_tabnet.tab_model import TabNetClassifier as _RawTabNetClassifier\nfrom sklearn.base import BaseEstimator, ClassifierMixin\nimport torch\n\nclass TabNetSklearn(BaseEstimator, ClassifierMixin):\n    _estimator_type = \"classifier\"\n\n    def __init__(\n        self,\n        n_d=16, n_a=16, n_steps=4,\n        gamma=1.5, n_independent=2, n_shared=2,\n        lambda_sparse=1e-4,\n        optimizer_fn=torch.optim.Adam,\n        optimizer_params=None,\n        mask_type='entmax',\n        scheduler_params=None,\n        scheduler_fn=torch.optim.lr_scheduler.StepLR,\n        seed=42,\n        verbose=0\n    ):\n        self.n_d = n_d\n        self.n_a = n_a\n        self.n_steps = n_steps\n        self.gamma = gamma\n        self.n_independent = n_independent\n        self.n_shared = n_shared\n        self.lambda_sparse = lambda_sparse\n        self.optimizer_fn = optimizer_fn\n        self.optimizer_params = optimizer_params or dict(lr=2e-3)\n        self.mask_type = mask_type\n        self.scheduler_params = scheduler_params or {\"step_size\": 10, \"gamma\": 0.9}\n        self.scheduler_fn = scheduler_fn\n        self.seed = seed\n        self.verbose = verbose\n\n        # underlying TabNet instance (created in fit to allow proper cloning)\n        self._model = None\n\n    def fit(self, X, y):\n        self._model = _RawTabNetClassifier(\n            n_d=self.n_d, n_a=self.n_a, n_steps=self.n_steps,\n            gamma=self.gamma, n_independent=self.n_independent, n_shared=self.n_shared,\n            lambda_sparse=self.lambda_sparse,\n            optimizer_fn=self.optimizer_fn,\n            optimizer_params=self.optimizer_params,\n            mask_type=self.mask_type,\n            scheduler_params=self.scheduler_params,\n            scheduler_fn=self.scheduler_fn,\n            seed=self.seed,\n            verbose=self.verbose\n        )\n        self._model.fit(X, y)\n        # sklearn compatibility attributes\n        self.classes_ = getattr(self._model, \"classes_\", None)\n        return self\n\n    def predict(self, X):\n        return self._model.predict(X)\n\n    def predict_proba(self, X):\n        return self._model.predict_proba(X)\n\n    def get_params(self, deep=True):\n        return {\n            \"n_d\": self.n_d, \"n_a\": self.n_a, \"n_steps\": self.n_steps,\n            \"gamma\": self.gamma, \"n_independent\": self.n_independent, \"n_shared\": self.n_shared,\n            \"lambda_sparse\": self.lambda_sparse,\n            \"optimizer_fn\": self.optimizer_fn, \"optimizer_params\": self.optimizer_params,\n            \"mask_type\": self.mask_type,\n            \"scheduler_params\": self.scheduler_params, \"scheduler_fn\": self.scheduler_fn,\n            \"seed\": self.seed, \"verbose\": self.verbose,\n        }\n\n    def set_params(self, **params):\n        for k, v in params.items():\n            setattr(self, k, v)\n        return self\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:26:00.115115Z","iopub.execute_input":"2025-08-21T21:26:00.115409Z","iopub.status.idle":"2025-08-21T21:26:03.116772Z","shell.execute_reply.started":"2025-08-21T21:26:00.115391Z","shell.execute_reply":"2025-08-21T21:26:03.116012Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"from lightgbm import LGBMClassifier\n\nlgbm = LGBMClassifier(\n    n_estimators=600,\n    learning_rate=0.05,\n    max_depth=-1,\n    num_leaves=31,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    reg_lambda=1.0,\n    random_state=RSEED,\n    n_jobs=-1,\n    # remove if dataset is not imbalanced\n    class_weight=\"balanced\"\n)\n\ntabnet = TabNetSklearn(\n    n_d=16, n_a=16, n_steps=4,\n    gamma=1.5, n_independent=2, n_shared=2,\n    lambda_sparse=1e-4,\n    optimizer_fn=torch.optim.Adam,\n    optimizer_params=dict(lr=2e-3),\n    mask_type='entmax',\n    scheduler_params={\"step_size\": 10, \"gamma\": 0.9},\n    scheduler_fn=torch.optim.lr_scheduler.StepLR,\n    seed=RSEED,\n    verbose=0\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:26:03.119033Z","iopub.execute_input":"2025-08-21T21:26:03.119389Z","iopub.status.idle":"2025-08-21T21:26:06.807927Z","shell.execute_reply.started":"2025-08-21T21:26:03.119370Z","shell.execute_reply":"2025-08-21T21:26:06.807147Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"from sklearn.ensemble import VotingClassifier, StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\n\nvoter = VotingClassifier(\n    estimators=[(\"lgbm\", lgbm), (\"tabnet\", tabnet)],\n    voting=\"soft\",\n    weights=[2, 1]\n)\n\nmeta = LogisticRegression(max_iter=2000, random_state=RSEED)\nstack = StackingClassifier(\n    estimators=[(\"lgbm\", lgbm), (\"tabnet\", tabnet)],\n    final_estimator=meta,\n    stack_method=\"predict_proba\",\n    passthrough=False,\n    cv=StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:26:06.808851Z","iopub.execute_input":"2025-08-21T21:26:06.809723Z","iopub.status.idle":"2025-08-21T21:26:07.101009Z","shell.execute_reply.started":"2025-08-21T21:26:06.809700Z","shell.execute_reply":"2025-08-21T21:26:07.100244Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"from sklearn.ensemble import VotingClassifier, StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\n\n# Soft Voting (probability averaging)\nvoter = VotingClassifier(\n    estimators=[(\"lgbm\", lgbm), (\"tabnet\", tabnet)],\n    voting=\"soft\",\n    weights=[2, 1]  # adjust if needed\n)\n\n# Stacking (uses out-of-fold probabilities for meta-learner)\nmeta = LogisticRegression(max_iter=2000, random_state=RSEED)\nstack = StackingClassifier(\n    estimators=[(\"lgbm\", lgbm), (\"tabnet\", tabnet)],\n    final_estimator=meta,\n    stack_method=\"predict_proba\",\n    passthrough=False,\n    cv=StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:26:07.101827Z","iopub.execute_input":"2025-08-21T21:26:07.102033Z","iopub.status.idle":"2025-08-21T21:26:10.953905Z","shell.execute_reply.started":"2025-08-21T21:26:07.102017Z","shell.execute_reply":"2025-08-21T21:26:10.953229Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedKFold, cross_validate\n\nroc_key = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key\n}\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\n# Voting CV\nv_cv = cross_validate(voter, X_train_np, y_train_np, cv=cv, scoring=scoring, n_jobs=-1)\nprint(\"[Voting] CV precision (macro):\", round(v_cv['test_precision'].mean(), 4))\nprint(\"[Voting] CV recall    (macro):\", round(v_cv['test_recall'].mean(), 4))\nprint(\"[Voting] CV F1        (macro):\", round(v_cv['test_f1'].mean(), 4))\nprint(f\"[Voting] CV {roc_key}:\", round(v_cv['test_roc_auc'].mean(), 4))\n\n# Stacking CV\ns_cv = cross_validate(stack, X_train_np, y_train_np, cv=cv, scoring=scoring, n_jobs=-1)\nprint(\"\\n[Stacking] CV precision (macro):\", round(s_cv['test_precision'].mean(), 4))\nprint(\"[Stacking] CV recall    (macro):\", round(s_cv['test_recall'].mean(), 4))\nprint(\"[Stacking] CV F1        (macro):\", round(s_cv['test_f1'].mean(), 4))\nprint(f\"[Stacking] CV {roc_key}:\", round(s_cv['test_roc_auc'].mean(), 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T21:26:10.954583Z","iopub.execute_input":"2025-08-21T21:26:10.954773Z","iopub.status.idle":"2025-08-21T22:23:47.553043Z","shell.execute_reply.started":"2025-08-21T21:26:10.954758Z","shell.execute_reply":"2025-08-21T22:23:47.552369Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n","output_type":"stream"},{"name":"stdout","text":"[Voting] CV precision (macro): 0.6057\n[Voting] CV recall    (macro): 0.5646\n[Voting] CV F1        (macro): 0.5766\n[Voting] CV roc_auc: 0.7832\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n","output_type":"stream"},{"name":"stdout","text":"\n[Stacking] CV precision (macro): 0.5519\n[Stacking] CV recall    (macro): 0.5069\n[Stacking] CV F1        (macro): 0.4898\n[Stacking] CV roc_auc: 0.7839\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score\n\n# Choose your winner from CV:\nchosen = stack  # or: voter\n\n# Fit on train\nchosen.fit(X_train_np, y_train_np)\n\n# Predict on test\ny_pred = chosen.predict(X_test_np)\nproba = chosen.predict_proba(X_test_np)\n\n# Metrics: precision, recall, F1 (macro), ROC-AUC\nprecision = precision_score(y_test_np, y_pred, average='macro', zero_division=0)\nrecall    = recall_score(y_test_np, y_pred, average='macro', zero_division=0)\nf1        = f1_score(y_test_np, y_pred, average='macro', zero_division=0)\n\nif is_multiclass:\n    roc = roc_auc_score(y_test_np, proba, multi_class='ovr')\nelse:\n    roc = roc_auc_score(y_test_np, proba[:, 1])\n\nprint(\"=== Test Metrics ===\")\nprint(\"Precision (macro):\", round(precision, 4))\nprint(\"Recall    (macro):\", round(recall, 4))\nprint(\"F1        (macro):\", round(f1, 4))\nprint((\"ROC-AUC (OvR):\" if is_multiclass else \"ROC-AUC:\"), round(roc, 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:23:47.553857Z","iopub.execute_input":"2025-08-21T22:23:47.554106Z","iopub.status.idle":"2025-08-21T22:25:18.024552Z","shell.execute_reply.started":"2025-08-21T22:23:47.554073Z","shell.execute_reply":"2025-08-21T22:25:18.023867Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 398, number of negative: 3690\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000175 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 899\n[LightGBM] [Info] Number of data points in the train set: 4088, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n","output_type":"stream"},{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000162 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000131 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000138 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000235 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000224 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n/usr/local/lib/python3.11/dist-packages/pytorch_tabnet/abstract_model.py:687: UserWarning: No early stopping will be performed, last training weights will be used.\n  warnings.warn(wrn_msg)\n","output_type":"stream"},{"name":"stdout","text":"=== Test Metrics ===\nPrecision (macro): 0.5767\nRecall    (macro): 0.5067\nF1        (macro): 0.4917\nROC-AUC: 0.7895\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"!pip -q install catboost","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:25:18.025388Z","iopub.execute_input":"2025-08-21T22:25:18.025820Z","iopub.status.idle":"2025-08-21T22:25:21.114613Z","shell.execute_reply.started":"2025-08-21T22:25:18.025801Z","shell.execute_reply":"2025-08-21T22:25:21.113770Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"from catboost import CatBoostClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n# CatBoost (works fine on one-hot features too)\ncat = CatBoostClassifier(\n    iterations=800,\n    learning_rate=0.05,\n    depth=6,\n    l2_leaf_reg=3.0,\n    random_seed=RSEED,\n    verbose=False,\n    loss_function=\"Logloss\",\n    auto_class_weights=\"Balanced\"  # remove if not imbalanced\n)\n\n# MLP needs scaling\nmlp = Pipeline([\n    (\"scaler\", StandardScaler()),\n    (\"clf\", MLPClassifier(\n        hidden_layer_sizes=(256, 128),\n        activation=\"relu\",\n        solver=\"adam\",\n        alpha=1e-4,\n        learning_rate_init=1e-3,\n        max_iter=200,\n        early_stopping=True,\n        n_iter_no_change=10,\n        random_state=RSEED\n    ))\n])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:25:21.115749Z","iopub.execute_input":"2025-08-21T22:25:21.115997Z","iopub.status.idle":"2025-08-21T22:25:21.814777Z","shell.execute_reply.started":"2025-08-21T22:25:21.115972Z","shell.execute_reply":"2025-08-21T22:25:21.814201Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"from sklearn.ensemble import VotingClassifier, StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\n\n# Soft Voting\nvoter_cb_mlp = VotingClassifier(\n    estimators=[(\"cat\", cat), (\"mlp\", mlp)],\n    voting=\"soft\",\n    weights=[2, 1]  # tweak if needed\n)\n\n# Stacking\nmeta2 = LogisticRegression(max_iter=2000, random_state=RSEED)\nstack_cb_mlp = StackingClassifier(\n    estimators=[(\"cat\", cat), (\"mlp\", mlp)],\n    final_estimator=meta2,\n    stack_method=\"predict_proba\",\n    passthrough=False,\n    cv=StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:25:21.815485Z","iopub.execute_input":"2025-08-21T22:25:21.816488Z","iopub.status.idle":"2025-08-21T22:25:21.821312Z","shell.execute_reply.started":"2025-08-21T22:25:21.816468Z","shell.execute_reply":"2025-08-21T22:25:21.820645Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"from sklearn.model_selection import cross_validate\n\nroc_key2 = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring2 = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key2\n}\n\ncv2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\n# Voting CV\nv2_cv = cross_validate(voter_cb_mlp, X_train_np, y_train_np, cv=cv2, scoring=scoring2, n_jobs=-1)\nprint(\"[CatBoost+MLP Voting] CV precision (macro):\", round(v2_cv['test_precision'].mean(), 4))\nprint(\"[CatBoost+MLP Voting] CV recall    (macro):\", round(v2_cv['test_recall'].mean(), 4))\nprint(\"[CatBoost+MLP Voting] CV F1        (macro):\", round(v2_cv['test_f1'].mean(), 4))\nprint(f\"[CatBoost+MLP Voting] CV {roc_key2}:\", round(v2_cv['test_roc_auc'].mean(), 4))\n\n# Stacking CV\ns2_cv = cross_validate(stack_cb_mlp, X_train_np, y_train_np, cv=cv2, scoring=scoring2, n_jobs=-1)\nprint(\"\\n[CatBoost+MLP Stacking] CV precision (macro):\", round(s2_cv['test_precision'].mean(), 4))\nprint(\"[CatBoost+MLP Stacking] CV recall    (macro):\", round(s2_cv['test_recall'].mean(), 4))\nprint(\"[CatBoost+MLP Stacking] CV F1        (macro):\", round(s2_cv['test_f1'].mean(), 4))\nprint(f\"[CatBoost+MLP Stacking] CV {roc_key2}:\", round(s2_cv['test_roc_auc'].mean(), 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:25:21.822212Z","iopub.execute_input":"2025-08-21T22:25:21.822524Z","iopub.status.idle":"2025-08-21T22:26:32.965059Z","shell.execute_reply.started":"2025-08-21T22:25:21.822498Z","shell.execute_reply":"2025-08-21T22:26:32.964255Z"}},"outputs":[{"name":"stdout","text":"[CatBoost+MLP Voting] CV precision (macro): 0.5951\n[CatBoost+MLP Voting] CV recall    (macro): 0.5541\n[CatBoost+MLP Voting] CV F1        (macro): 0.5636\n[CatBoost+MLP Voting] CV roc_auc: 0.7728\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"\n[CatBoost+MLP Stacking] CV precision (macro): 0.5105\n[CatBoost+MLP Stacking] CV recall    (macro): 0.5095\n[CatBoost+MLP Stacking] CV F1        (macro): 0.4935\n[CatBoost+MLP Stacking] CV roc_auc: 0.775\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score\n\n# Pick your winner (from Part-13). Example: stacking\nchosen2 = stack_cb_mlp  # or: voter_cb_mlp\n\nchosen2.fit(X_train_np, y_train_np)\n\ny_pred2 = chosen2.predict(X_test_np)\nproba2 = chosen2.predict_proba(X_test_np)\n\nprec2 = precision_score(y_test_np, y_pred2, average='macro', zero_division=0)\nrec2  = recall_score(y_test_np, y_pred2, average='macro', zero_division=0)\nf12   = f1_score(y_test_np, y_pred2, average='macro', zero_division=0)\n\nif is_multiclass:\n    roc2 = roc_auc_score(y_test_np, proba2, multi_class='ovr')\nelse:\n    roc2 = roc_auc_score(y_test_np, proba2[:, 1])\n\nprint(\"=== Test Metrics (CatBoost+MLP) ===\")\nprint(\"Precision (macro):\", round(prec2, 4))\nprint(\"Recall    (macro):\", round(rec2, 4))\nprint(\"F1        (macro):\", round(f12, 4))\nprint((\"ROC-AUC (OvR):\" if is_multiclass else \"ROC-AUC:\"), round(roc2, 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:26:32.965900Z","iopub.execute_input":"2025-08-21T22:26:32.966126Z","iopub.status.idle":"2025-08-21T22:26:48.579781Z","shell.execute_reply.started":"2025-08-21T22:26:32.966107Z","shell.execute_reply":"2025-08-21T22:26:48.579215Z"}},"outputs":[{"name":"stdout","text":"=== Test Metrics (CatBoost+MLP) ===\nPrecision (macro): 0.518\nRecall    (macro): 0.503\nF1        (macro): 0.4886\nROC-AUC: 0.7713\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"# Part-22: SVM (RBF) pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n# SVM benefits from scaling; keep probabilities on for ROC-AUC\nsvm_rbf = Pipeline([\n    (\"scaler\", StandardScaler()),\n    (\"clf\", SVC(kernel=\"rbf\", C=1.0, gamma=\"scale\", probability=True, class_weight=\"balanced\"))\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:26:48.580355Z","iopub.execute_input":"2025-08-21T22:26:48.580573Z","iopub.status.idle":"2025-08-21T22:26:48.586895Z","shell.execute_reply.started":"2025-08-21T22:26:48.580556Z","shell.execute_reply":"2025-08-21T22:26:48.585015Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# Part-23: CV evaluation for SVM\nfrom sklearn.model_selection import StratifiedKFold, cross_validate\n\nroc_key3 = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring3 = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key3\n}\n\ncv3 = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\nsvm_cv = cross_validate(svm_rbf, X_train_np, y_train_np, cv=cv3, scoring=scoring3, n_jobs=-1)\nprint(\"[SVM] CV precision (macro):\", round(svm_cv['test_precision'].mean(), 4))\nprint(\"[SVM] CV recall    (macro):\", round(svm_cv['test_recall'].mean(), 4))\nprint(\"[SVM] CV F1        (macro):\", round(svm_cv['test_f1'].mean(), 4))\nprint(f\"[SVM] CV {roc_key3}:\", round(svm_cv['test_roc_auc'].mean(), 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:26:48.589134Z","iopub.execute_input":"2025-08-21T22:26:48.590213Z","iopub.status.idle":"2025-08-21T22:26:53.929181Z","shell.execute_reply.started":"2025-08-21T22:26:48.590174Z","shell.execute_reply":"2025-08-21T22:26:53.928327Z"}},"outputs":[{"name":"stdout","text":"[SVM] CV precision (macro): 0.5856\n[SVM] CV recall    (macro): 0.7156\n[SVM] CV F1        (macro): 0.5714\n[SVM] CV roc_auc: 0.7878\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"# Part-23: CV evaluation for SVM\nfrom sklearn.model_selection import StratifiedKFold, cross_validate\n\nroc_key3 = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring3 = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key3\n}\n\ncv3 = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\nsvm_cv = cross_validate(svm_rbf, X_train_np, y_train_np, cv=cv3, scoring=scoring3, n_jobs=-1)\nprint(\"[SVM] CV precision (macro):\", round(svm_cv['test_precision'].mean(), 4))\nprint(\"[SVM] CV recall    (macro):\", round(svm_cv['test_recall'].mean(), 4))\nprint(\"[SVM] CV F1        (macro):\", round(svm_cv['test_f1'].mean(), 4))\nprint(f\"[SVM] CV {roc_key3}:\", round(svm_cv['test_roc_auc'].mean(), 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:26:53.929934Z","iopub.execute_input":"2025-08-21T22:26:53.930158Z","iopub.status.idle":"2025-08-21T22:26:59.100612Z","shell.execute_reply.started":"2025-08-21T22:26:53.930140Z","shell.execute_reply":"2025-08-21T22:26:59.099766Z"}},"outputs":[{"name":"stdout","text":"[SVM] CV precision (macro): 0.5856\n[SVM] CV recall    (macro): 0.7156\n[SVM] CV F1        (macro): 0.5714\n[SVM] CV roc_auc: 0.7878\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"# Part-24: Final train/test for SVM\nfrom sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score\n\nsvm_rbf.fit(X_train_np, y_train_np)\n\ny_pred3  = svm_rbf.predict(X_test_np)\nproba3   = svm_rbf.predict_proba(X_test_np)\n\nprec3 = precision_score(y_test_np, y_pred3, average='macro', zero_division=0)\nrec3  = recall_score(y_test_np, y_pred3, average='macro', zero_division=0)\nf13   = f1_score(y_test_np, y_pred3, average='macro', zero_division=0)\n\nif is_multiclass:\n    roc3 = roc_auc_score(y_test_np, proba3, multi_class='ovr')\nelse:\n    roc3 = roc_auc_score(y_test_np, proba3[:, 1])\n\nprint(\"=== Test Metrics (SVM) ===\")\nprint(\"Precision (macro):\", round(prec3, 4))\nprint(\"Recall    (macro):\", round(rec3, 4))\nprint(\"F1        (macro):\", round(f13, 4))\nprint((\"ROC-AUC (OvR):\" if is_multiclass else \"ROC-AUC:\"), round(roc3, 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:26:59.101341Z","iopub.execute_input":"2025-08-21T22:26:59.101536Z","iopub.status.idle":"2025-08-21T22:27:01.970590Z","shell.execute_reply.started":"2025-08-21T22:26:59.101512Z","shell.execute_reply":"2025-08-21T22:27:01.969802Z"}},"outputs":[{"name":"stdout","text":"=== Test Metrics (SVM) ===\nPrecision (macro): 0.5681\nRecall    (macro): 0.6744\nF1        (macro): 0.5448\nROC-AUC: 0.7337\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"# Part-25: Bagging over heterogeneous base learners (KNN + RF)\nfrom sklearn.base import BaseEstimator, ClassifierMixin\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nimport numpy as np\nimport re  # only if you used it earlier; safe to keep\n\nclass BagKNNRF(BaseEstimator, ClassifierMixin):\n    \"\"\"\n    Bagging meta-ensemble that merges KNN and RF as base learners.\n    Half of the learners are KNN (with scaling), half are RF.\n    Soft-averages predicted probabilities.\n    \"\"\"\n    def __init__(\n        self,\n        n_estimators=20,\n        knn_neighbors=15,\n        knn_weights=\"distance\",\n        rf_trees=200,\n        rf_max_depth=None,\n        bootstrap=True,\n        random_state=42,\n        class_weight=\"balanced\"\n    ):\n        self.n_estimators = n_estimators\n        self.knn_neighbors = knn_neighbors\n        self.knn_weights = knn_weights\n        self.rf_trees = rf_trees\n        self.rf_max_depth = rf_max_depth\n        self.bootstrap = bootstrap\n        self.random_state = random_state\n        self.class_weight = class_weight\n        self._models = []\n        self.classes_ = None\n\n    def _make_knn(self, seed):\n        # KNN benefits from scaling; seed unused but kept for symmetry\n        return Pipeline([\n            (\"scaler\", StandardScaler()),\n            (\"knn\", KNeighborsClassifier(\n                n_neighbors=self.knn_neighbors,\n                weights=self.knn_weights\n            ))\n        ])\n\n    def _make_rf(self, seed):\n        return RandomForestClassifier(\n            n_estimators=self.rf_trees,\n            max_depth=self.rf_max_depth,\n            random_state=seed,\n            n_jobs=-1,\n            class_weight=self.class_weight\n        )\n\n    def fit(self, X, y):\n        rng = np.random.RandomState(self.random_state)\n        self.classes_ = np.unique(y)\n        self._models = []\n\n        n = X.shape[0]\n        # split count roughly half/half between KNN and RF\n        n_knn = self.n_estimators // 2\n        n_rf  = self.n_estimators - n_knn\n\n        for i in range(self.n_estimators):\n            seed = rng.randint(1_000_000_000)\n            if self.bootstrap:\n                idx = rng.randint(0, n, n)   # bootstrap sample\n            else:\n                idx = rng.permutation(n)     # sub-sample without replacement\n\n            if i < n_knn:\n                model = self._make_knn(seed)\n            else:\n                model = self._make_rf(seed)\n\n            model.fit(X[idx], y[idx])\n            self._models.append(model)\n        return self\n\n    def predict_proba(self, X):\n        probas = []\n        for m in self._models:\n            p = m.predict_proba(X)  # KNN & RF both support predict_proba\n            probas.append(p)\n        return np.mean(probas, axis=0)\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self.classes_[np.argmax(proba, axis=1)]\n\n# ---- instantiate the bagging ensemble (uses your existing RSEED) ----\nbag_knn_rf = BagKNNRF(\n    n_estimators=20,           # total learners = 20 (≈10 KNN + 10 RF)\n    knn_neighbors=15,\n    knn_weights=\"distance\",\n    rf_trees=200,\n    rf_max_depth=None,\n    bootstrap=True,\n    random_state=RSEED,        # defined earlier in your notebook\n    class_weight=\"balanced\"\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:27:01.971418Z","iopub.execute_input":"2025-08-21T22:27:01.971644Z","iopub.status.idle":"2025-08-21T22:27:01.982099Z","shell.execute_reply.started":"2025-08-21T22:27:01.971619Z","shell.execute_reply":"2025-08-21T22:27:01.981414Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# Part-26: CV evaluation for BagKNNRF\nfrom sklearn.model_selection import StratifiedKFold, cross_validate\n\nroc_key_bag = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring_bag = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key_bag\n}\n\ncv_bag = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\nbag_cv = cross_validate(bag_knn_rf, X_train_np, y_train_np, cv=cv_bag, scoring=scoring_bag, n_jobs=-1)\nprint(\"[BagKNN+RF] CV precision (macro):\", round(bag_cv['test_precision'].mean(), 4))\nprint(\"[BagKNN+RF] CV recall    (macro):\", round(bag_cv['test_recall'].mean(), 4))\nprint(\"[BagKNN+RF] CV F1        (macro):\", round(bag_cv['test_f1'].mean(), 4))\nprint(f\"[BagKNN+RF] CV {roc_key_bag}:\", round(bag_cv['test_roc_auc'].mean(), 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:27:01.982865Z","iopub.execute_input":"2025-08-21T22:27:01.983217Z","iopub.status.idle":"2025-08-21T22:27:21.687497Z","shell.execute_reply.started":"2025-08-21T22:27:01.983169Z","shell.execute_reply":"2025-08-21T22:27:21.686721Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"[BagKNN+RF] CV precision (macro): 0.4513\n[BagKNN+RF] CV recall    (macro): 0.4993\n[BagKNN+RF] CV F1        (macro): 0.4741\n[BagKNN+RF] CV roc_auc: 0.7844\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"# Part-27: Final train/test for BagKNNRF\nfrom sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score\n\nbag_knn_rf.fit(X_train_np, y_train_np)\ny_pred_bag = bag_knn_rf.predict(X_test_np)\nproba_bag  = bag_knn_rf.predict_proba(X_test_np)\n\nprec_bag = precision_score(y_test_np, y_pred_bag, average='macro', zero_division=0)\nrec_bag  = recall_score(y_test_np, y_pred_bag, average='macro', zero_division=0)\nf1_bag   = f1_score(y_test_np, y_pred_bag, average='macro', zero_division=0)\n\nif is_multiclass:\n    roc_bag = roc_auc_score(y_test_np, proba_bag, multi_class='ovr')\nelse:\n    roc_bag = roc_auc_score(y_test_np, proba_bag[:, 1])\n\nprint(\"=== Test Metrics (BagKNN+RF) ===\")\nprint(\"Precision (macro):\", round(prec_bag, 4))\nprint(\"Recall    (macro):\", round(rec_bag, 4))\nprint(\"F1        (macro):\", round(f1_bag, 4))\nprint((\"ROC-AUC (OvR):\" if is_multiclass else \"ROC-AUC:\"), round(roc_bag, 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:27:21.688401Z","iopub.execute_input":"2025-08-21T22:27:21.688668Z","iopub.status.idle":"2025-08-21T22:27:29.184633Z","shell.execute_reply.started":"2025-08-21T22:27:21.688643Z","shell.execute_reply":"2025-08-21T22:27:29.183842Z"}},"outputs":[{"name":"stdout","text":"=== Test Metrics (BagKNN+RF) ===\nPrecision (macro): 0.4509\nRecall    (macro): 0.4984\nF1        (macro): 0.4735\nROC-AUC: 0.7403\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"# Part-28: AdaBoost with RandomForest as base estimator\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.utils import check_random_state\n\n# Small RF to act as 'weak' learner\nrf_weak = RandomForestClassifier(\n    n_estimators=25,          # small forest per stage\n    max_depth=3,              # shallow trees\n    max_features=\"sqrt\",\n    random_state=RSEED,\n    n_jobs=-1,\n    class_weight=\"balanced\"\n)\n\n# sklearn changed arg name from base_estimator->estimator in newer versions\ntry:\n    boost_rf = AdaBoostClassifier(\n        estimator=rf_weak,\n        n_estimators=30,      # boosting stages\n        learning_rate=0.5,\n        algorithm=\"SAMME.R\",\n        random_state=RSEED\n    )\nexcept TypeError:\n    boost_rf = AdaBoostClassifier(\n        base_estimator=rf_weak,\n        n_estimators=30,\n        learning_rate=0.5,\n        algorithm=\"SAMME.R\",\n        random_state=RSEED\n    )\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:27:29.185530Z","iopub.execute_input":"2025-08-21T22:27:29.186343Z","iopub.status.idle":"2025-08-21T22:27:29.191099Z","shell.execute_reply.started":"2025-08-21T22:27:29.186314Z","shell.execute_reply":"2025-08-21T22:27:29.190327Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"# Part-29: CV evaluation for Boosted RF\nroc_key_boost = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring_boost = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key_boost\n}\n\ncv_boost = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\nboost_cv = cross_validate(boost_rf, X_train_np, y_train_np, cv=cv_boost, scoring=scoring_boost, n_jobs=-1)\nprint(\"[BoostRF] CV precision (macro):\", round(boost_cv['test_precision'].mean(), 4))\nprint(\"[BoostRF] CV recall    (macro):\", round(boost_cv['test_recall'].mean(), 4))\nprint(\"[BoostRF] CV F1        (macro):\", round(boost_cv['test_f1'].mean(), 4))\nprint(f\"[BoostRF] CV {roc_key_boost}:\", round(boost_cv['test_roc_auc'].mean(), 4))\n\n# Final train/test\nboost_rf.fit(X_train_np, y_train_np)\ny_pred_boost = boost_rf.predict(X_test_np)\nproba_boost  = boost_rf.predict_proba(X_test_np)\n\nprec_boost = precision_score(y_test_np, y_pred_boost, average='macro', zero_division=0)\nrec_boost  = recall_score(y_test_np, y_pred_boost, average='macro', zero_division=0)\nf1_boost   = f1_score(y_test_np, y_pred_boost, average='macro', zero_division=0)\n\nif is_multiclass:\n    roc_boost = roc_auc_score(y_test_np, proba_boost, multi_class='ovr')\nelse:\n    roc_boost = roc_auc_score(y_test_np, proba_boost[:, 1])\n\nprint(\"=== Test Metrics (BoostRF) ===\")\nprint(\"Precision (macro):\", round(prec_boost, 4))\nprint(\"Recall    (macro):\", round(rec_boost, 4))\nprint(\"F1        (macro):\", round(f1_boost, 4))\nprint((\"ROC-AUC (OvR):\" if is_multiclass else \"ROC-AUC:\"), round(roc_boost, 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:27:29.195458Z","iopub.execute_input":"2025-08-21T22:27:29.195699Z","iopub.status.idle":"2025-08-21T22:27:40.019502Z","shell.execute_reply.started":"2025-08-21T22:27:29.195676Z","shell.execute_reply":"2025-08-21T22:27:40.018881Z"}},"outputs":[{"name":"stdout","text":"[BoostRF] CV precision (macro): 0.5952\n[BoostRF] CV recall    (macro): 0.7263\n[BoostRF] CV F1        (macro): 0.5931\n[BoostRF] CV roc_auc: 0.8022\n=== Test Metrics (BoostRF) ===\nPrecision (macro): 0.5759\nRecall    (macro): 0.6856\nF1        (macro): 0.564\nROC-AUC: 0.7663\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"# Part-30: Bagging over heterogeneous base learners (Naive Bayes + CatBoost)\nfrom sklearn.base import BaseEstimator, ClassifierMixin\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom catboost import CatBoostClassifier\nimport numpy as np\n\nclass BagNBTotalBoost(BaseEstimator, ClassifierMixin):\n    \"\"\"\n    Bagging meta-ensemble that merges GaussianNB and a boosted tree (CatBoost) as base learners.\n    Half of the learners are NB (with scaling), half are CatBoost.\n    Soft-averages predicted probabilities.\n    \"\"\"\n    def __init__(\n        self,\n        n_estimators=20,           # total base learners\n        nb_with_scaler=True,\n        cb_iterations=200,\n        cb_depth=6,\n        cb_learning_rate=0.05,\n        cb_l2_leaf_reg=3.0,\n        bootstrap=True,\n        random_state=42,\n        cb_class_weight=\"Balanced\"  # or None if not imbalanced\n    ):\n        self.n_estimators = n_estimators\n        self.nb_with_scaler = nb_with_scaler\n        self.cb_iterations = cb_iterations\n        self.cb_depth = cb_depth\n        self.cb_learning_rate = cb_learning_rate\n        self.cb_l2_leaf_reg = cb_l2_leaf_reg\n        self.bootstrap = bootstrap\n        self.random_state = random_state\n        self.cb_class_weight = cb_class_weight\n        self._models = []\n        self.classes_ = None\n\n    def _make_nb(self):\n        if self.nb_with_scaler:\n            return Pipeline([\n                (\"scaler\", StandardScaler()),\n                (\"nb\", GaussianNB())\n            ])\n        return GaussianNB()\n\n    def _make_cb(self, seed):\n        return CatBoostClassifier(\n            iterations=self.cb_iterations,\n            learning_rate=self.cb_learning_rate,\n            depth=self.cb_depth,\n            l2_leaf_reg=self.cb_l2_leaf_reg,\n            random_seed=seed,\n            verbose=False,\n            loss_function=\"Logloss\",\n            auto_class_weights=self.cb_class_weight\n        )\n\n    def fit(self, X, y):\n        rng = np.random.RandomState(self.random_state)\n        self.classes_ = np.unique(y)\n        self._models = []\n\n        n = X.shape[0]\n        n_nb = self.n_estimators // 2\n        n_cb = self.n_estimators - n_nb\n\n        for i in range(self.n_estimators):\n            seed = rng.randint(1_000_000_000)\n            if self.bootstrap:\n                idx = rng.randint(0, n, n)   # bootstrap sample\n            else:\n                idx = rng.permutation(n)     # sub-sample without replacement\n\n            if i < n_nb:\n                model = self._make_nb()\n            else:\n                model = self._make_cb(seed)\n\n            model.fit(X[idx], y[idx])\n            self._models.append(model)\n        return self\n\n    def predict_proba(self, X):\n        probas = []\n        for m in self._models:\n            p = m.predict_proba(X)\n            probas.append(p)\n        return np.mean(probas, axis=0)\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self.classes_[np.argmax(proba, axis=1)]\n\n# ---- instantiate the bagging ensemble ----\nbag_nb_total = BagNBTotalBoost(\n    n_estimators=20,\n    nb_with_scaler=True,\n    cb_iterations=200,\n    cb_depth=6,\n    cb_learning_rate=0.05,\n    cb_l2_leaf_reg=3.0,\n    bootstrap=True,\n    random_state=RSEED,\n    cb_class_weight=\"Balanced\"  # set to None if not imbalanced\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:27:40.020154Z","iopub.execute_input":"2025-08-21T22:27:40.020384Z","iopub.status.idle":"2025-08-21T22:27:40.036980Z","shell.execute_reply.started":"2025-08-21T22:27:40.020365Z","shell.execute_reply":"2025-08-21T22:27:40.036330Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# Part-31: CV evaluation for BagNB+TotalBoost (CatBoost)\nfrom sklearn.model_selection import StratifiedKFold, cross_validate\n\nroc_key_bag_nb = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring_bag_nb = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key_bag_nb\n}\n\ncv_bag_nb = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\nbag_nb_cv = cross_validate(bag_nb_total, X_train_np, y_train_np, cv=cv_bag_nb,\n                           scoring=scoring_bag_nb, n_jobs=-1)\nprint(\"[BagNB+TotalBoost] CV precision (macro):\", round(bag_nb_cv['test_precision'].mean(), 4))\nprint(\"[BagNB+TotalBoost] CV recall    (macro):\", round(bag_nb_cv['test_recall'].mean(), 4))\nprint(\"[BagNB+TotalBoost] CV F1        (macro):\", round(bag_nb_cv['test_f1'].mean(), 4))\nprint(f\"[BagNB+TotalBoost] CV {roc_key_bag_nb}:\", round(bag_nb_cv['test_roc_auc'].mean(), 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:27:40.037794Z","iopub.execute_input":"2025-08-21T22:27:40.038427Z","iopub.status.idle":"2025-08-21T22:28:00.942158Z","shell.execute_reply.started":"2025-08-21T22:27:40.038408Z","shell.execute_reply":"2025-08-21T22:28:00.941558Z"}},"outputs":[{"name":"stdout","text":"[BagNB+TotalBoost] CV precision (macro): 0.5603\n[BagNB+TotalBoost] CV recall    (macro): 0.6103\n[BagNB+TotalBoost] CV F1        (macro): 0.2906\n[BagNB+TotalBoost] CV roc_auc: 0.795\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"# Part-32: Final train/test for BagNB+TotalBoost\nfrom sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score\n\nbag_nb_total.fit(X_train_np, y_train_np)\ny_pred_bag_nb = bag_nb_total.predict(X_test_np)\nproba_bag_nb  = bag_nb_total.predict_proba(X_test_np)\n\nprec_bag_nb = precision_score(y_test_np, y_pred_bag_nb, average='macro', zero_division=0)\nrec_bag_nb  = recall_score(y_test_np, y_pred_bag_nb, average='macro', zero_division=0)\nf1_bag_nb   = f1_score(y_test_np, y_pred_bag_nb, average='macro', zero_division=0)\n\nif is_multiclass:\n    roc_bag_nb = roc_auc_score(y_test_np, proba_bag_nb, multi_class='ovr')\nelse:\n    roc_bag_nb = roc_auc_score(y_test_np, proba_bag_nb[:, 1])\n\nprint(\"=== Test Metrics (BagNB+TotalBoost) ===\")\nprint(\"Precision (macro):\", round(prec_bag_nb, 4))\nprint(\"Recall    (macro):\", round(rec_bag_nb, 4))\nprint(\"F1        (macro):\", round(f1_bag_nb, 4))\nprint((\"ROC-AUC (OvR):\" if is_multiclass else \"ROC-AUC:\"), round(roc_bag_nb, 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:28:00.943028Z","iopub.execute_input":"2025-08-21T22:28:00.943667Z","iopub.status.idle":"2025-08-21T22:28:06.041155Z","shell.execute_reply.started":"2025-08-21T22:28:00.943644Z","shell.execute_reply":"2025-08-21T22:28:06.040292Z"}},"outputs":[{"name":"stdout","text":"=== Test Metrics (BagNB+TotalBoost) ===\nPrecision (macro): 0.5577\nRecall    (macro): 0.5846\nF1        (macro): 0.2482\nROC-AUC: 0.7566\n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"# Part-33: AdaBoost with GaussianNB as base estimator (boosting NB)\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\ntry:\n    boost_nb = AdaBoostClassifier(\n        estimator=GaussianNB(),\n        n_estimators=50,       # number of boosting stages\n        learning_rate=0.5,\n        algorithm=\"SAMME.R\",\n        random_state=RSEED\n    )\nexcept TypeError:\n    # older sklearn versions\n    boost_nb = AdaBoostClassifier(\n        base_estimator=GaussianNB(),\n        n_estimators=50,\n        learning_rate=0.5,\n        algorithm=\"SAMME.R\",\n        random_state=RSEED\n    )\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:28:06.042093Z","iopub.execute_input":"2025-08-21T22:28:06.042458Z","iopub.status.idle":"2025-08-21T22:28:06.046788Z","shell.execute_reply.started":"2025-08-21T22:28:06.042432Z","shell.execute_reply":"2025-08-21T22:28:06.046067Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"# Part-34: CV evaluation for Boosted NB\nroc_key_boost_nb = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring_boost_nb = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key_boost_nb\n}\n\ncv_boost_nb = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\nboost_nb_cv = cross_validate(boost_nb, X_train_np, y_train_np, cv=cv_boost_nb,\n                             scoring=scoring_boost_nb, n_jobs=-1)\nprint(\"[BoostNB] CV precision (macro):\", round(boost_nb_cv['test_precision'].mean(), 4))\nprint(\"[BoostNB] CV recall    (macro):\", round(boost_nb_cv['test_recall'].mean(), 4))\nprint(\"[BoostNB] CV F1        (macro):\", round(boost_nb_cv['test_f1'].mean(), 4))\nprint(f\"[BoostNB] CV {roc_key_boost_nb}:\", round(boost_nb_cv['test_roc_auc'].mean(), 4))\n\n# Final train/test\nboost_nb.fit(X_train_np, y_train_np)\ny_pred_boost_nb = boost_nb.predict(X_test_np)\nproba_boost_nb  = boost_nb.predict_proba(X_test_np)\n\nprec_boost_nb = precision_score(y_test_np, y_pred_boost_nb, average='macro', zero_division=0)\nrec_boost_nb  = recall_score(y_test_np, y_pred_boost_nb, average='macro', zero_division=0)\nf1_boost_nb   = f1_score(y_test_np, y_pred_boost_nb, average='macro', zero_division=0)\n\nif is_multiclass:\n    roc_boost_nb = roc_auc_score(y_test_np, proba_boost_nb, multi_class='ovr')\nelse:\n    roc_boost_nb = roc_auc_score(y_test_np, proba_boost_nb[:, 1])\n\nprint(\"=== Test Metrics (BoostNB) ===\")\nprint(\"Precision (macro):\", round(prec_boost_nb, 4))\nprint(\"Recall    (macro):\", round(rec_boost_nb, 4))\nprint(\"F1        (macro):\", round(f1_boost_nb, 4))\nprint((\"ROC-AUC (OvR):\" if is_multiclass else \"ROC-AUC:\"), round(roc_boost_nb, 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:28:06.047569Z","iopub.execute_input":"2025-08-21T22:28:06.047809Z","iopub.status.idle":"2025-08-21T22:28:07.202344Z","shell.execute_reply.started":"2025-08-21T22:28:06.047786Z","shell.execute_reply":"2025-08-21T22:28:07.201741Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"[BoostNB] CV precision (macro): 0.641\n[BoostNB] CV recall    (macro): 0.5084\n[BoostNB] CV F1        (macro): 0.493\n[BoostNB] CV roc_auc: 0.8014\n=== Test Metrics (BoostNB) ===\nPrecision (macro): 0.7861\nRecall    (macro): 0.5189\nF1        (macro): 0.5125\nROC-AUC: 0.7827\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"# Part-35: Base learners for GBM + RobustBoost\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# GBM (LightGBM)\ngbm_base = LGBMClassifier(\n    n_estimators=600,\n    learning_rate=0.05,\n    max_depth=-1,\n    num_leaves=31,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    reg_lambda=1.0,\n    random_state=RSEED,\n    n_jobs=-1,\n    class_weight=\"balanced\"\n)\n\n# \"RobustBoost\" proxy: AdaBoost with shallow trees (robust-ish to label noise)\nrobust_base_tree = DecisionTreeClassifier(\n    max_depth=2,              # shallow\n    min_samples_leaf=20,      # regularization\n    random_state=RSEED\n)\nrobust_boost = AdaBoostClassifier(\n    base_estimator=robust_base_tree,\n    n_estimators=200,         # boosting stages\n    learning_rate=0.3,        # moderate step\n    algorithm=\"SAMME.R\",\n    random_state=RSEED\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:28:07.203045Z","iopub.execute_input":"2025-08-21T22:28:07.203286Z","iopub.status.idle":"2025-08-21T22:28:07.208143Z","shell.execute_reply.started":"2025-08-21T22:28:07.203269Z","shell.execute_reply":"2025-08-21T22:28:07.207516Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, ClassifierMixin, clone\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\nclass BlendedGBMRobust(BaseEstimator, ClassifierMixin):\n    def __init__(self, gbm, robust, blend_size=0.2, random_state=42):\n        self.gbm = gbm\n        self.robust = robust\n        self.blend_size = blend_size\n        self.random_state = random_state\n        self.meta = LogisticRegression(max_iter=2000, random_state=random_state, class_weight=\"balanced\")\n        self._gbm_fitted = None\n        self._robust_fitted = None\n        self.classes_ = None\n\n    def fit(self, X, y):\n        # split inner blend holdout\n        X_tr, X_bl, y_tr, y_bl = train_test_split(\n            X, y, test_size=self.blend_size, stratify=y, random_state=self.random_state\n        )\n        # fit base models on X_tr\n        gbm = clone(self.gbm)\n        rob = clone(self.robust)\n        gbm.fit(X_tr, y_tr)\n        rob.fit(X_tr, y_tr)\n\n        # get blend features from holdout\n        P_gbm = gbm.predict_proba(X_bl)\n        P_rob = rob.predict_proba(X_bl)\n        Z_blend = np.hstack([P_gbm, P_rob])\n\n        # fit meta on blend holdout\n        self.meta.fit(Z_blend, y_bl)\n\n        # finally, refit base models on the full training set for inference\n        self._gbm_fitted = clone(self.gbm).fit(X, y)\n        self._robust_fitted = clone(self.robust).fit(X, y)\n        self.classes_ = np.unique(y)\n        return self\n\n    def predict_proba(self, X):\n        P_gbm = self._gbm_fitted.predict_proba(X)\n        P_rob = self._robust_fitted.predict_proba(X)\n        Z = np.hstack([P_gbm, P_rob])\n        return self.meta.predict_proba(Z)\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self.classes_[np.argmax(proba, axis=1)]\n\n# instantiate the blender\nblend_gbm_rob = BlendedGBMRobust(\n    gbm=gbm_base, robust=robust_boost, blend_size=0.2, random_state=RSEED\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:28:07.208902Z","iopub.execute_input":"2025-08-21T22:28:07.209264Z","iopub.status.idle":"2025-08-21T22:28:07.224126Z","shell.execute_reply.started":"2025-08-21T22:28:07.209247Z","shell.execute_reply":"2025-08-21T22:28:07.223577Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"# Part-36: Blending estimator (holdout-based meta-learner)\nfrom sklearn.base import BaseEstimator, ClassifierMixin, clone\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\nclass BlendedGBMRobust(BaseEstimator, ClassifierMixin):\n    def __init__(self, gbm, robust, blend_size=0.2, random_state=42):\n        self.gbm = gbm\n        self.robust = robust\n        self.blend_size = blend_size\n        self.random_state = random_state\n        self.meta = LogisticRegression(max_iter=2000, random_state=random_state, class_weight=\"balanced\")\n        self._gbm_fitted = None\n        self._robust_fitted = None\n        self.classes_ = None\n\n    def fit(self, X, y):\n        # split inner blend holdout\n        X_tr, X_bl, y_tr, y_bl = train_test_split(\n            X, y, test_size=self.blend_size, stratify=y, random_state=self.random_state\n        )\n        # fit base models on X_tr\n        gbm = clone(self.gbm)\n        rob = clone(self.robust)\n        gbm.fit(X_tr, y_tr)\n        rob.fit(X_tr, y_tr)\n\n        # get blend features from holdout\n        P_gbm = gbm.predict_proba(X_bl)\n        P_rob = rob.predict_proba(X_bl)\n        Z_blend = np.hstack([P_gbm, P_rob])\n\n        # fit meta on blend holdout\n        self.meta.fit(Z_blend, y_bl)\n\n        # finally, refit base models on the full training set for inference\n        self._gbm_fitted = clone(self.gbm).fit(X, y)\n        self._robust_fitted = clone(self.robust).fit(X, y)\n        self.classes_ = np.unique(y)\n        return self\n\n    def predict_proba(self, X):\n        P_gbm = self._gbm_fitted.predict_proba(X)\n        P_rob = self._robust_fitted.predict_proba(X)\n        Z = np.hstack([P_gbm, P_rob])\n        return self.meta.predict_proba(Z)\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self.classes_[np.argmax(proba, axis=1)]\n\n# instantiate the blender\nblend_gbm_rob = BlendedGBMRobust(\n    gbm=gbm_base, robust=robust_boost, blend_size=0.2, random_state=RSEED\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:28:07.224932Z","iopub.execute_input":"2025-08-21T22:28:07.225337Z","iopub.status.idle":"2025-08-21T22:28:07.237853Z","shell.execute_reply.started":"2025-08-21T22:28:07.225319Z","shell.execute_reply":"2025-08-21T22:28:07.237238Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"# # Part-36: Blending estimator (holdout-based meta-learner)\n# from sklearn.base import BaseEstimator, ClassifierMixin, clone\n# from sklearn.linear_model import LogisticRegression\n# from sklearn.model_selection import train_test_split\n# import numpy as np\n\n# class BlendedGBMRobust(BaseEstimator, ClassifierMixin):\n#     def __init__(self, gbm, robust, blend_size=0.2, random_state=42):\n#         self.gbm = gbm\n#         self.robust = robust\n#         self.blend_size = blend_size\n#         self.random_state = random_state\n#         self.meta = LogisticRegression(max_iter=2000, random_state=random_state, class_weight=\"balanced\")\n#         self._gbm_fitted = # Part-36 (cont.): CV for blending\n# from sklearn.model_selection import StratifiedKFold, cross_validate\n\n# roc_key_blend = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\n# scoring_blend = {\n#     'precision': 'precision_macro',\n#     'recall': 'recall_macro',\n#     'f1': 'f1_macro',\n#     'roc_auc': roc_key_blend\n# }\n# cv_blend = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\n# blend_cv = cross_validate(blend_gbm_rob, X_train_np, y_train_np, cv=cv_blend,\n#                           scoring=scoring_blend, n_jobs=-1)\n# print(\"[Blend GBM+Robust] CV precision (macro):\", round(blend_cv['test_precision'].mean(), 4))\n# print(\"[Blend GBM+Robust] CV recall    (macro):\", round(blend_cv['test_recall'].mean(), 4))\n# print(\"[Blend GBM+Robust] CV F1        (macro):\", round(blend_cv['test_f1'].mean(), 4))\n# print(f\"[Blend GBM+Robust] CV {roc_key_blend}:\", round(blend_cv['test_roc_auc'].mean(), 4))\n\n#         self._robust_fitted = None\n#         self.classes_ = None\n\n#     def fit(self, X, y):\n#         # split inner blend holdout\n#         X_tr, X_bl, y_tr, y_bl = train_test_split(\n#             X, y, test_size=self.blend_size, stratify=y, random_state=self.random_state\n#         )\n#         # fit base models on X_tr\n#         gbm = clone(self.gbm)\n#         rob = clone(self.robust)\n#         gbm.fit(X_tr, y_tr)\n#         rob.fit(X_tr, y_tr)\n\n#         # get blend features from holdout\n#         P_gbm = gbm.predict_proba(X_bl)\n#         P_rob = rob.predict_proba(X_bl)\n#         Z_blend = np.hstack([P_gbm, P_rob])\n\n#         # fit meta on blend holdout\n#         self.meta.fit(Z_blend, y_bl)\n\n#         # finally, refit base models on the full training set for inference\n#         self._gbm_fitted = clone(self.gbm).fit(X, y)\n#         self._robust_fitted = clone(self.robust).fit(X, y)\n#         self.classes_ = np.unique(y)\n#         return self\n\n#     def predict_proba(self, X):\n#         P_gbm = self._gbm_fitted.predict_proba(X)\n#         P_rob = self._robust_fitted.predict_proba(X)\n#         Z = np.hstack([P_gbm, P_rob])\n#         return self.meta.predict_proba(Z)\n\n#     def predict(self, X):\n#         proba = self.predict_proba(X)\n#         return self.classes_[np.argmax(proba, axis=1)]\n\n# # instantiate the blender\n# blend_gbm_rob = BlendedGBMRobust(\n#     gbm=gbm_base, robust=robust_boost, blend_size=0.2, random_state=RSEED\n# )\n\n# Part-36: Blending estimator (holdout-based meta-learner)\nfrom sklearn.base import BaseEstimator, ClassifierMixin, clone\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\nclass BlendedGBMRobust(BaseEstimator, ClassifierMixin):\n    def __init__(self, gbm, robust, blend_size=0.2, random_state=42):\n        self.gbm = gbm\n        self.robust = robust\n        self.blend_size = blend_size\n        self.random_state = random_state\n        self.meta = LogisticRegression(max_iter=2000, random_state=random_state, class_weight=\"balanced\")\n        self._gbm_fitted = None\n        self._robust_fitted = None\n        self.classes_ = None\n\n    def fit(self, X, y):\n        # split inner blend holdout\n        X_tr, X_bl, y_tr, y_bl = train_test_split(\n            X, y, test_size=self.blend_size, stratify=y, random_state=self.random_state\n        )\n        # fit base models on X_tr\n        gbm = clone(self.gbm)\n        rob = clone(self.robust)\n        gbm.fit(X_tr, y_tr)\n        rob.fit(X_tr, y_tr)\n\n        # get blend features from holdout\n        P_gbm = gbm.predict_proba(X_bl)\n        P_rob = rob.predict_proba(X_bl)\n        Z_blend = np.hstack([P_gbm, P_rob])\n\n        # fit meta on blend holdout\n        self.meta.fit(Z_blend, y_bl)\n\n        # finally, refit base models on the full training set for inference\n        self._gbm_fitted = clone(self.gbm).fit(X, y)\n        self._robust_fitted = clone(self.robust).fit(X, y)\n        self.classes_ = np.unique(y)\n        return self\n\n    def predict_proba(self, X):\n        P_gbm = self._gbm_fitted.predict_proba(X)\n        P_rob = self._robust_fitted.predict_proba(X)\n        Z = np.hstack([P_gbm, P_rob])\n        return self.meta.predict_proba(Z)\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self.classes_[np.argmax(proba, axis=1)]\n\n# instantiate the blender\nblend_gbm_rob = BlendedGBMRobust(\n    gbm=gbm_base, robust=robust_boost, blend_size=0.2, random_state=RSEED\n)\n\n# Part-36 (cont.): CV for blending\nfrom sklearn.model_selection import StratifiedKFold, cross_validate\n\nroc_key_blend = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring_blend = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key_blend\n}\ncv_blend = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\nblend_cv = cross_validate(blend_gbm_rob, X_train_np, y_train_np, cv=cv_blend,\n                          scoring=scoring_blend, n_jobs=-1)\nprint(\"[Blend GBM+Robust] CV precision (macro):\", round(blend_cv['test_precision'].mean(), 4))\nprint(\"[Blend GBM+Robust] CV recall    (macro):\", round(blend_cv['test_recall'].mean(), 4))\nprint(\"[Blend GBM+Robust] CV F1        (macro):\", round(blend_cv['test_f1'].mean(), 4))\nprint(f\"[Blend GBM+Robust] CV {roc_key_blend}:\", round(blend_cv['test_roc_auc'].mean(), 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:28:07.238511Z","iopub.execute_input":"2025-08-21T22:28:07.238690Z","iopub.status.idle":"2025-08-21T22:45:22.253981Z","shell.execute_reply.started":"2025-08-21T22:28:07.238676Z","shell.execute_reply":"2025-08-21T22:45:22.253356Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.130793 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004250 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.128856 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.050940 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 256, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.032029 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 892\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.106909 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.133850 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.106912 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.129940 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.055503 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.015690 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006236 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000232 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 892\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 256, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.053822 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.130852 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.151454 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[Blend GBM+Robust] CV precision (macro): 0.5757\n[Blend GBM+Robust] CV recall    (macro): 0.6946\n[Blend GBM+Robust] CV F1        (macro): 0.5481\n[Blend GBM+Robust] CV roc_auc: 0.7679\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"# Part-36 (cont.): CV for blending\nfrom sklearn.model_selection import StratifiedKFold, cross_validate\n\nroc_key_blend = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring_blend = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key_blend\n}\ncv_blend = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\nblend_cv = cross_validate(blend_gbm_rob, X_train_np, y_train_np, cv=cv_blend,\n                          scoring=scoring_blend, n_jobs=-1)\nprint(\"[Blend GBM+Robust] CV precision (macro):\", round(blend_cv['test_precision'].mean(), 4))\nprint(\"[Blend GBM+Robust] CV recall    (macro):\", round(blend_cv['test_recall'].mean(), 4))\nprint(\"[Blend GBM+Robust] CV F1        (macro):\", round(blend_cv['test_f1'].mean(), 4))\nprint(f\"[Blend GBM+Robust] CV {roc_key_blend}:\", round(blend_cv['test_roc_auc'].mean(), 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T22:45:22.254734Z","iopub.execute_input":"2025-08-21T22:45:22.255351Z","iopub.status.idle":"2025-08-21T23:03:13.100426Z","shell.execute_reply.started":"2025-08-21T22:45:22.255328Z","shell.execute_reply":"2025-08-21T23:03:13.099646Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[Blend GBM+Robust] CV precision (macro): 0.5757\n[Blend GBM+Robust] CV recall    (macro): 0.6946\n[Blend GBM+Robust] CV F1        (macro): 0.5481\n[Blend GBM+Robust] CV roc_auc: 0.7679\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"# Part-36 (cont.): Final test for blending\nfrom sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score\n\nblend_gbm_rob.fit(X_train_np, y_train_np)\ny_pred_blend  = blend_gbm_rob.predict(X_test_np)\nproba_blend   = blend_gbm_rob.predict_proba(X_test_np)\n\nprec_blend = precision_score(y_test_np, y_pred_blend, average='macro', zero_division=0)\nrec_blend  = recall_score(y_test_np, y_pred_blend, average='macro', zero_division=0)\nf1_blend   = f1_score(y_test_np, y_pred_blend, average='macro', zero_division=0)\n\nif is_multiclass:\n    roc_blend = roc_auc_score(y_test_np, proba_blend, multi_class='ovr')\nelse:\n    roc_blend = roc_auc_score(y_test_np, proba_blend[:, 1])\n\nprint(\"=== Test Metrics (Blend GBM+Robust) ===\")\nprint(\"Precision (macro):\", round(prec_blend, 4))\nprint(\"Recall    (macro):\", round(rec_blend, 4))\nprint(\"F1        (macro):\", round(f1_blend, 4))\nprint((\"ROC-AUC (OvR):\" if is_multiclass else \"ROC-AUC:\"), round(roc_blend, 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T23:03:13.102046Z","iopub.execute_input":"2025-08-21T23:03:13.102290Z","iopub.status.idle":"2025-08-21T23:03:16.824803Z","shell.execute_reply.started":"2025-08-21T23:03:13.102269Z","shell.execute_reply":"2025-08-21T23:03:16.824217Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000137 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 398, number of negative: 3690\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.056650 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 899\n[LightGBM] [Info] Number of data points in the train set: 4088, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"=== Test Metrics (Blend GBM+Robust) ===\nPrecision (macro): 0.5873\nRecall    (macro): 0.7312\nF1        (macro): 0.5609\nROC-AUC: 0.7776\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.base import BaseEstimator, ClassifierMixin\n\nclass ChainedGBMRobust(BaseEstimator, ClassifierMixin):\n    def __init__(self, gbm, robust, oof_folds=5, random_state=42):\n        self.gbm = gbm\n        self.robust = robust\n        self.oof_folds = oof_folds\n        self.random_state = random_state\n        self._gbm_fitted = None\n        self._robust_fitted = None\n        self.classes_ = None\n        self.n_classes_ = None\n\n    def fit(self, X, y):\n        X = np.asarray(X)\n        y = np.asarray(y)\n        self.classes_ = np.unique(y)\n        self.n_classes_ = len(self.classes_)\n\n        # 1) OOF probs for GBM\n        oof = np.zeros((X.shape[0], self.n_classes_), dtype=float)\n        skf = StratifiedKFold(n_splits=self.oof_folds, shuffle=True, random_state=self.random_state)\n        for tr_idx, va_idx in skf.split(X, y):\n            gbm = clone(self.gbm)\n            gbm.fit(X[tr_idx], y[tr_idx])\n            oof[va_idx] = gbm.predict_proba(X[va_idx])\n\n        # 2) Fit GBM on full data for inference\n        self._gbm_fitted = clone(self.gbm).fit(X, y)\n\n        # 3) Train RobustBoost on augmented features [X, OOF]\n        X_aug = np.hstack([X, oof])\n        self._robust_fitted = clone(self.robust).fit(X_aug, y)\n        return self\n\n    def predict_proba(self, X):\n        X = np.asarray(X)\n        # use GBM fitted on full to get probs, then augment and predict with RobustBoost\n        P = self._gbm_fitted.predict_proba(X)\n        X_aug = np.hstack([X, P])\n        return self._robust_fitted.predict_proba(X_aug)\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self.classes_[np.argmax(proba, axis=1)]\n\n# instantiate the chain\nchain_gbm_rob = ChainedGBMRobust(\n    gbm=gbm_base, robust=robust_boost, oof_folds=5, random_state=RSEED\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T23:03:16.825478Z","iopub.execute_input":"2025-08-21T23:03:16.825656Z","iopub.status.idle":"2025-08-21T23:03:16.833277Z","shell.execute_reply.started":"2025-08-21T23:03:16.825641Z","shell.execute_reply":"2025-08-21T23:03:16.832588Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"# Part-37 (cont.): CV for chaining\nroc_key_chain = 'roc_auc_ovr' if is_multiclass else 'roc_auc'\nscoring_chain = {\n    'precision': 'precision_macro',\n    'recall': 'recall_macro',\n    'f1': 'f1_macro',\n    'roc_auc': roc_key_chain\n}\ncv_chain = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n\nchain_cv = cross_validate(chain_gbm_rob, X_train_np, y_train_np, cv=cv_chain,\n                          scoring=scoring_chain, n_jobs=-1)\nprint(\"[Chain GBM->Robust] CV precision (macro):\", round(chain_cv['test_precision'].mean(), 4))\nprint(\"[Chain GBM->Robust] CV recall    (macro):\", round(chain_cv['test_recall'].mean(), 4))\nprint(\"[Chain GBM->Robust] CV F1        (macro):\", round(chain_cv['test_f1'].mean(), 4))\nprint(f\"[Chain GBM->Robust] CV {roc_key_chain}:\", round(chain_cv['test_roc_auc'].mean(), 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T23:03:16.834032Z","iopub.execute_input":"2025-08-21T23:03:16.834302Z","iopub.status.idle":"2025-08-21T23:54:31.649066Z","shell.execute_reply.started":"2025-08-21T23:03:16.834278Z","shell.execute_reply":"2025-08-21T23:54:31.648433Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.131864 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.124845 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.101920 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.142847 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.097721 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000242 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.107820 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.137819 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.107924 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.140196 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.107842 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.129836 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000143 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.071936 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 256, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.131804 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 892\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.143855 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.134916 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.087946 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.135942 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000122 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.133842 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.069873 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 892\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.172859 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.152906 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.129322 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.107895 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003029 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.140364 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.143932 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.128524 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.130695 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.120951 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.135427 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.131947 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.131987 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.085594 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.131916 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.147840 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.151893 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.169924 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.107980 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.140913 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000224 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000208 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.104989 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.144946 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[Chain GBM->Robust] CV precision (macro): 0.5951\n[Chain GBM->Robust] CV recall    (macro): 0.5219\n[Chain GBM->Robust] CV F1        (macro): 0.5214\n[Chain GBM->Robust] CV roc_auc: 0.7564\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"# Part-37 (cont.): Final test for chaining\nchain_gbm_rob.fit(X_train_np, y_train_np)\ny_pred_chain = chain_gbm_rob.predict(X_test_np)\nproba_chain  = chain_gbm_rob.predict_proba(X_test_np)\n\nprec_chain = precision_score(y_test_np, y_pred_chain, average='macro', zero_division=0)\nrec_chain  = recall_score(y_test_np, y_pred_chain, average='macro', zero_division=0)\nf1_chain   = f1_score(y_test_np, y_pred_chain, average='macro', zero_division=0)\n\nif is_multiclass:\n    roc_chain = roc_auc_score(y_test_np, proba_chain, multi_class='ovr')\nelse:\n    roc_chain = roc_auc_score(y_test_np, proba_chain[:, 1])\n\nprint(\"=== Test Metrics (Chain GBM->Robust) ===\")\nprint(\"Precision (macro):\", round(prec_chain, 4))\nprint(\"Recall    (macro):\", round(rec_chain, 4))\nprint(\"F1        (macro):\", round(f1_chain, 4))\nprint((\"ROC-AUC (OvR):\" if is_multiclass else \"ROC-AUC:\"), round(roc_chain, 4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T23:54:31.649831Z","iopub.execute_input":"2025-08-21T23:54:31.650078Z","iopub.status.idle":"2025-08-21T23:54:36.728058Z","shell.execute_reply.started":"2025-08-21T23:54:31.650059Z","shell.execute_reply":"2025-08-21T23:54:36.727459Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000133 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000208 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000147 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000129 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000129 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 398, number of negative: 3690\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000238 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 899\n[LightGBM] [Info] Number of data points in the train set: 4088, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"=== Test Metrics (Chain GBM->Robust) ===\nPrecision (macro): 0.6139\nRecall    (macro): 0.5308\nF1        (macro): 0.5356\nROC-AUC: 0.733\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"# Part-38: Collect and print test metrics from all models run so far\n\n# Ensure is_multiclass exists (it should from earlier parts)\ntry:\n    _ = is_multiclass\nexcept NameError:\n    import numpy as np\n    is_multiclass = len(np.unique(y_train_np)) > 2\n\nroc_label = \"ROC-AUC (OvR)\" if is_multiclass else \"ROC-AUC\"\n\n# Map: Model display name -> (precision_var, recall_var, f1_var, roc_var)\n_models_vars = [\n    (\"Ensemble (LGBM+TabNet) – chosen\", (\"precision\", \"recall\", \"f1\", \"roc\")),                 # Part-16\n    (\"CatBoost+MLP – chosen2\",          (\"prec2\", \"rec2\", \"f12\", \"roc2\")),                     # Part-21\n    (\"SVM (RBF)\",                        (\"prec3\", \"rec3\", \"f13\", \"roc3\")),                     # Part-24\n    (\"Bagging: KNN+RF\",                  (\"prec_bag\", \"rec_bag\", \"f1_bag\", \"roc_bag\")),         # Part-27\n    (\"Boosting: RF (AdaBoost)\",          (\"prec_boost\", \"rec_boost\", \"f1_boost\", \"roc_boost\")), # Part-29\n    (\"Bagging: NB+CatBoost\",             (\"prec_bag_nb\", \"rec_bag_nb\", \"f1_bag_nb\", \"roc_bag_nb\")),   # Part-32\n    (\"Boosting: NB (AdaBoost)\",          (\"prec_boost_nb\", \"rec_boost_nb\", \"f1_boost_nb\", \"roc_boost_nb\")), # Part-34\n    (\"Blending: GBM+Robust\",             (\"prec_blend\", \"rec_blend\", \"f1_blend\", \"roc_blend\")), # Part-36\n    (\"Chaining: GBM→Robust\",             (\"prec_chain\", \"rec_chain\", \"f1_chain\", \"roc_chain\")), # Part-37\n]\n\n_results = []  # (name, precision, recall, f1, roc)\n\nfor name, (p_var, r_var, f_var, roc_var) in _models_vars:\n    g = globals()\n    if all(v in g for v in (p_var, r_var, f_var, roc_var)):\n        p = round(float(g[p_var]), 4)\n        r = round(float(g[r_var]), 4)\n        f = round(float(g[f_var]), 4)\n        roc = round(float(g[roc_var]), 4)\n\n        # Print in your requested 4-line format per model\n        print(f\"\\n=== Test Metrics — {name} ===\")\n        print(\"Precision (macro):\", p)\n        print(\"Recall    (macro):\", r)\n        print(\"F1        (macro):\", f)\n        print(f\"{roc_label}:\", roc)\n\n        _results.append((name, p, r, f, roc))\n\n# Optional: compact summary sorted by F1 then ROC-AUC\nif _results:\n    _results_sorted = sorted(_results, key=lambda t: (t[3], t[4]), reverse=True)\n    print(\"\\n=== Summary (sorted by F1, then ROC-AUC) ===\")\n    for name, p, r, f, roc in _results_sorted:\n        print(f\"{name:28s} | F1: {f:6.4f} | ROC: {roc:6.4f} | P: {p:6.4f} | R: {r:6.4f}\")\nelse:\n    print(\"No test metrics found. Make sure you ran the test-eval parts (16, 21, 24, 27, 29, 32, 34, 36, 37).\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T23:54:36.728848Z","iopub.execute_input":"2025-08-21T23:54:36.729056Z","iopub.status.idle":"2025-08-21T23:54:36.738981Z","shell.execute_reply.started":"2025-08-21T23:54:36.729040Z","shell.execute_reply":"2025-08-21T23:54:36.738294Z"}},"outputs":[{"name":"stdout","text":"\n=== Test Metrics — Ensemble (LGBM+TabNet) – chosen ===\nPrecision (macro): 0.5767\nRecall    (macro): 0.5067\nF1        (macro): 0.4917\nROC-AUC: 0.7895\n\n=== Test Metrics — CatBoost+MLP – chosen2 ===\nPrecision (macro): 0.518\nRecall    (macro): 0.503\nF1        (macro): 0.4886\nROC-AUC: 0.7713\n\n=== Test Metrics — SVM (RBF) ===\nPrecision (macro): 0.5681\nRecall    (macro): 0.6744\nF1        (macro): 0.5448\nROC-AUC: 0.7337\n\n=== Test Metrics — Bagging: KNN+RF ===\nPrecision (macro): 0.4509\nRecall    (macro): 0.4984\nF1        (macro): 0.4735\nROC-AUC: 0.7403\n\n=== Test Metrics — Boosting: RF (AdaBoost) ===\nPrecision (macro): 0.5759\nRecall    (macro): 0.6856\nF1        (macro): 0.564\nROC-AUC: 0.7663\n\n=== Test Metrics — Bagging: NB+CatBoost ===\nPrecision (macro): 0.5577\nRecall    (macro): 0.5846\nF1        (macro): 0.2482\nROC-AUC: 0.7566\n\n=== Test Metrics — Boosting: NB (AdaBoost) ===\nPrecision (macro): 0.7861\nRecall    (macro): 0.5189\nF1        (macro): 0.5125\nROC-AUC: 0.7827\n\n=== Test Metrics — Blending: GBM+Robust ===\nPrecision (macro): 0.5873\nRecall    (macro): 0.7312\nF1        (macro): 0.5609\nROC-AUC: 0.7776\n\n=== Test Metrics — Chaining: GBM→Robust ===\nPrecision (macro): 0.6139\nRecall    (macro): 0.5308\nF1        (macro): 0.5356\nROC-AUC: 0.733\n\n=== Summary (sorted by F1, then ROC-AUC) ===\nBoosting: RF (AdaBoost)      | F1: 0.5640 | ROC: 0.7663 | P: 0.5759 | R: 0.6856\nBlending: GBM+Robust         | F1: 0.5609 | ROC: 0.7776 | P: 0.5873 | R: 0.7312\nSVM (RBF)                    | F1: 0.5448 | ROC: 0.7337 | P: 0.5681 | R: 0.6744\nChaining: GBM→Robust         | F1: 0.5356 | ROC: 0.7330 | P: 0.6139 | R: 0.5308\nBoosting: NB (AdaBoost)      | F1: 0.5125 | ROC: 0.7827 | P: 0.7861 | R: 0.5189\nEnsemble (LGBM+TabNet) – chosen | F1: 0.4917 | ROC: 0.7895 | P: 0.5767 | R: 0.5067\nCatBoost+MLP – chosen2       | F1: 0.4886 | ROC: 0.7713 | P: 0.5180 | R: 0.5030\nBagging: KNN+RF              | F1: 0.4735 | ROC: 0.7403 | P: 0.4509 | R: 0.4984\nBagging: NB+CatBoost         | F1: 0.2482 | ROC: 0.7566 | P: 0.5577 | R: 0.5846\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"# Part-40: Plots for Precision, Recall, F1, ROC-AUC across all models\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Ensure is_multiclass exists (usually set earlier)\ntry:\n    _ = is_multiclass\nexcept NameError:\n    is_multiclass = len(np.unique(y_train_np)) > 2\n\nroc_label = \"ROC-AUC (OvR)\" if is_multiclass else \"ROC-AUC\"\n\n# Same registry used in Part-38\nmodels_vars = [\n    (\"Ensemble (LGBM+TabNet) – chosen\", (\"precision\", \"recall\", \"f1\", \"roc\")),                 # Part-16\n    (\"CatBoost+MLP – chosen2\",          (\"prec2\", \"rec2\", \"f12\", \"roc2\")),                     # Part-21\n    (\"SVM (RBF)\",                        (\"prec3\", \"rec3\", \"f13\", \"roc3\")),                    # Part-24\n    (\"Bagging: KNN+RF\",                  (\"prec_bag\", \"rec_bag\", \"f1_bag\", \"roc_bag\")),        # Part-27\n    (\"Boosting: RF (AdaBoost)\",          (\"prec_boost\", \"rec_boost\", \"f1_boost\", \"roc_boost\")),# Part-29\n    (\"Bagging: NB+CatBoost\",             (\"prec_bag_nb\", \"rec_bag_nb\", \"f1_bag_nb\", \"roc_bag_nb\")),   # Part-32\n    (\"Boosting: NB (AdaBoost)\",          (\"prec_boost_nb\", \"rec_boost_nb\", \"f1_boost_nb\", \"roc_boost_nb\")), # Part-34\n    (\"Blending: GBM+Robust\",             (\"prec_blend\", \"rec_blend\", \"f1_blend\", \"roc_blend\")), # Part-36\n    (\"Chaining: GBM→Robust\",             (\"prec_chain\", \"rec_chain\", \"f1_chain\", \"roc_chain\")), # Part-37\n]\n\n# Collect whichever are available\nrows = []\ng = globals()\nfor name, (p_var, r_var, f_var, roc_var) in models_vars:\n    if all(v in g for v in (p_var, r_var, f_var, roc_var)):\n        p = round(float(g[p_var]), 4)\n        r = round(float(g[r_var]), 4)\n        f = round(float(g[f_var]), 4)\n        roc = round(float(g[roc_var]), 4)\n        rows.append((name, p, r, f, roc))\n\nif not rows:\n    raise RuntimeError(\"No test metrics found. Run Parts 16/21/24/27/29/32/34/36/37 first.\")\n\ndf_metrics = pd.DataFrame(rows, columns=[\"Model\", \"Precision\", \"Recall\", \"F1\", \"ROC_AUC\"]).set_index(\"Model\")\n\n# Optional: sort by F1 (descending)\ndf_metrics = df_metrics.sort_values(by=\"F1\", ascending=False)\n\n# --- Helper to annotate bars with values ---\ndef annotate_bars(ax):\n    for p in ax.patches:\n        height = p.get_height()\n        ax.annotate(f\"{height:.3f}\",\n                    (p.get_x() + p.get_width()/2, height),\n                    ha='center', va='bottom', fontsize=8, rotation=0)\n\n# 1) Precision\nplt.figure(figsize=(10, 5))\nax1 = plt.gca()\nax1.bar(df_metrics.index, df_metrics[\"Precision\"])\nax1.set_title(\"Precision (macro) by Model\")\nax1.set_ylabel(\"Precision\")\nplt.xticks(rotation=30, ha='right')\nannotate_bars(ax1)\nplt.tight_layout()\nplt.show()\n\n# 2) Recall\nplt.figure(figsize=(10, 5))\nax2 = plt.gca()\nax2.bar(df_metrics.index, df_metrics[\"Recall\"])\nax2.set_title(\"Recall (macro) by Model\")\nax2.set_ylabel(\"Recall\")\nplt.xticks(rotation=30, ha='right')\nannotate_bars(ax2)\nplt.tight_layout()\nplt.show()\n\n# 3) F1\nplt.figure(figsize=(10, 5))\nax3 = plt.gca()\nax3.bar(df_metrics.index, df_metrics[\"F1\"])\nax3.set_title(\"F1 (macro) by Model\")\nax3.set_ylabel(\"F1\")\nplt.xticks(rotation=30, ha='right')\nannotate_bars(ax3)\nplt.tight_layout()\nplt.show()\n\n# 4) ROC-AUC\nplt.figure(figsize=(10, 5))\nax4 = plt.gca()\nax4.bar(df_metrics.index, df_metrics[\"ROC_AUC\"])\nax4.set_title(f\"{roc_label} by Model\")\nax4.set_ylabel(\"ROC-AUC\")\nplt.xticks(rotation=30, ha='right')\nannotate_bars(ax4)\nplt.tight_layout()\nplt.show()\n\n# If you also want the underlying table printed:\nprint(\"\\n=== Metrics Table (sorted by F1) ===\")\ndisplay(df_metrics)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T23:54:36.739776Z","iopub.execute_input":"2025-08-21T23:54:36.740065Z","iopub.status.idle":"2025-08-21T23:54:37.663164Z","shell.execute_reply.started":"2025-08-21T23:54:36.740039Z","shell.execute_reply":"2025-08-21T23:54:37.662642Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"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5kmePHlk8eLFWvMXLFhQLCwslNfu3bslT548aQbUcXFxEhUVpfEiIiIiIiKi7C3bB9Tx8fFy8uRJ8fLyUtL09PTEy8tLDh8+/FHbWLRokbRr107y5s2rdXlQUJCYmZkpLysrq89SdiIiIiIiIsq8sn1AHRERIYmJiWJubq6Rbm5uLmFhYR9c/9ixY3LhwgX59ttv08wzbNgwiYyMVF6hoaH/udxERERERESUuRlkdAEyu0WLFomTk5N4eHikmcfIyEiMjIzSsVRERERERESU0bJ9DXWhQoVEX19fwsPDNdLDw8PFwsLivevGxMTImjVr5JtvvvmSRSQiIiIiIqIsKNsH1IaGhuLm5iYhISFKWlJSkoSEhEiVKlXeu+769eslLi5OOnXq9KWLSURERERERFlMjmjyHRgYKF27dhV3d3fx8PCQ6dOnS0xMjPj7+4uISJcuXaRYsWISFBSksd6iRYvEx8dHvvrqq4woNhEREREREWViOSKg9vPzkydPnsjIkSMlLCxMXFxcZOfOncpAZffu3RM9Pc3K+qtXr8qBAwdk165dGVFkIiIiIiIiyuRyREAtIhIQECABAQFal+3bty9Vmr29vQD4wqUiIiIiIiKirCrb96EmIiIiIiIi+hIYUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ4YUBMRERERERHpgAE1ERERERERkQ5yREA9Z84csba2FmNjY/H09JRjx469N/+LFy+kT58+UrRoUTEyMpIyZcrIjh070qm0RERERERElBUYZHQBvrS1a9dKYGCgzJs3Tzw9PWX69Oni7e0tV69elSJFiqTKHx8fL/Xr15ciRYrIhg0bpFixYnL37l3Jnz9/+heeiIiIiIiIMq1sH1BPnTpVunfvLv7+/iIiMm/ePNm+fbssXrxYhg4dmir/4sWL5dmzZ3Lo0CHJlSuXiIhYW1unZ5GJiIiIiIgoC8jWTb7j4+Pl5MmT4uXlpaTp6emJl5eXHD58WOs6W7dulSpVqkifPn3E3NxcypcvL+PHj5fExMQ03ycuLk6ioqI0XkRERERERJS9ZeuAOiIiQhITE8Xc3Fwj3dzcXMLCwrSuc+vWLdmwYYMkJibKjh075KeffpIpU6bIuHHj0nyfoKAgMTMzU15WVlafdT+IiIiIiIgo88nWAbUukpKSpEiRIvL777+Lm5ub+Pn5yYgRI2TevHlprjNs2DCJjIxUXqGhoelYYiIiIiIiIsoI2boPdaFChURfX1/Cw8M10sPDw8XCwkLrOkWLFpVcuXKJvr6+klauXDkJCwuT+Ph4MTQ0TLWOkZGRGBkZfd7CExERERERUaaWrWuoDQ0Nxc3NTUJCQpS0pKQkCQkJkSpVqmhdp1q1anLjxg1JSkpS0q5duyZFixbVGkwTERERERFRzpStA2oRkcDAQFmwYIEsW7ZMLl++LN99953ExMQoo3536dJFhg0bpuT/7rvv5NmzZ9K/f3+5du2abN++XcaPHy99+vTJqF0gIiIiIiKiTChbN/kWEfHz85MnT57IyJEjJSwsTFxcXGTnzp3KQGX37t0TPb23zxWsrKzk77//lgEDBoizs7MUK1ZM+vfvL0OGDMmoXSAiIiIiIqJMKNsH1CIiAQEBEhAQoHXZvn37UqVVqVJFjhw58oVLRURERERERFlZtm/yTURERERERPQlMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0gEDaiIiIiIiIiIdMKAmIiIiIiIi0kGOCajnzJkj1tbWYmxsLJ6ennLs2LE08y5dulRUKpXGy9jYOB1LS0RERERERJldjgio165dK4GBgTJq1Cg5deqUVKhQQby9veXx48dprmNqaiqPHj1SXnfv3k3HEhMREREREVFmlyMC6qlTp0r37t3F399fHBwcZN68eZInTx5ZvHhxmuuoVCqxsLBQXubm5ulYYiIiIiIiIsrssn1AHR8fLydPnhQvLy8lTU9PT7y8vOTw4cNprvfy5UspWbKkWFlZSYsWLeTixYtp5o2Li5OoqCiNFxEREREREWVv2T6gjoiIkMTExFQ1zObm5hIWFqZ1HXt7e1m8eLFs2bJFVqxYIUlJSVK1alW5f/++1vxBQUFiZmamvKysrD77fhAREREREVHmku0Dal1UqVJFunTpIi4uLlKrVi3ZtGmTFC5cWObPn681/7BhwyQyMlJ5hYaGpnOJiYiIiIiIKL0ZZHQBvrRChQqJvr6+hIeHa6SHh4eLhYXFR20jV65cUrFiRblx44bW5UZGRmJkZPSfy0pERERERERZR7avoTY0NBQ3NzcJCQlR0pKSkiQkJESqVKnyUdtITEyU8+fPS9GiRb9UMYmIiIiIiCiLyXQB9fPnz2XWrFlaB/aKjIxMc9n7BAYGyoIFC2TZsmVy+fJl+e677yQmJkb8/f1FRKRLly4ybNgwJf/YsWNl165dcuvWLTl16pR06tRJ7t69K99+++1/2zkiIiIiIiLKNjJdk+/Zs2fLuXPnpG/fvqmWmZmZyf79+yUqKkpGjBjx0dv08/OTJ0+eyMiRIyUsLExcXFxk586dykBl9+7dEz29t88Wnj9/Lt27d5ewsDApUKCAuLm5yaFDh8TBweG/7yARERERERFlC5kuoN64caNMmTIlzeU9e/aUQYMGfVJALSISEBAgAQEBWpft27dP4+9p06bJtGnTPmn7RERERERElLNkuibfN2/elNKlS6e5vHTp0nLz5s10LBERERERERFRapkuoNbX15eHDx+mufzhw4cazbOJiIiIiIiIMkKmi0wrVqwomzdvTnP5H3/8IRUrVky/AhERERERERFpken6UAcEBEi7du2kePHi8t1334m+vr6IJE9dNXfuXJk2bZqsWrUqg0tJREREREREOV2mC6hbt24tgwcPln79+smIESPE1tZWRERu3bolL1++lB9++EHatGmTwaUkIiIiIiKinC7TBdQiIr/88ou0aNFCVq5cKTdu3BAAUqtWLenQoYN4eHhkdPGIiIiIiIiIMmdALSLi4eHB4JmIiIiI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RESUWqYLqPX19SU+Pj7N5W/evBF9ff10LBERERERERFRapkuoHZ1dZWVK1emuTw4OFhcXV3TsUREREREREREqWW6PtSDBg0SHx8fiYuLk4EDB4q5ubmIiISFhcmUKVNk+vTp8scff2RwKYmIiIiIiCiny3QBddOmTWXatGkyaNAgmTJlipiZmYmISGRkpBgYGMjkyZOladOmGVxKIiIiIiIiyukyXUAtItK3b1/x8fGRDRs2yPXr10VEpEyZMtK6dWuxsrKSV69eSe7cuTO4lERERERERJSTZcqAWkTEyspKBgwYoJEWFxcnU6dOlUmTJklYWFgGlYyIiIiIiIgoEw5KFhcXJ8OGDRN3d3epWrWqbN68WURElixZIjY2NjJt2rRUgTYRERERERFRest0NdQjR46U+fPni5eXlxw6dEh8fX3F399fjhw5IlOnThVfX19Om0VEREREREQZLtMF1OvXr5fly5dL8+bN5cKFC+Ls7CwJCQly9uxZUalUGV08IiIiIiIiIhHJhE2+79+/L25ubiIiUr58eTEyMpIBAwYwmCYiIiIiIqJMJdMF1ImJiWJoaKj8bWBgIPny5cvAEhERERERERGllumafAOQbt26iZGRkYiIvH79Wnr16iV58+bVyLdp06aMKB4RERERERGRiGTCgLpr164af3fq1CmDSkJERERERESUtkwXUC9ZsiSji0BERERERET0QZmuDzURERERERFRVsCAmoiIiIiIiEgHDKiJiIiIiIiIdJBjAuo5c+aItbW1GBsbi6enpxw7dizNvJs2bRJ3d3fJnz+/5M2bV1xcXCQ4ODgdS0tERERERESZXY4IqNeuXSuBgYEyatQoOXXqlFSoUEG8vb3l8ePHWvMXLFhQRowYIYcPH5Zz586Jv7+/+Pv7y99//53OJSciIiIiIqLMKkcE1FOnTpXu3buLv7+/ODg4yLx58yRPnjyyePFirflr164tLVu2lHLlyomdnZ30799fnJ2d5cCBA1rzx8XFSVRUlMaLiIiIiIiIsrdsH1DHx8fLyZMnxcvLS0nT09MTLy8vOXz48AfXByAhISFy9epVqVmzptY8QUFBYmZmprysrKw+W/mJiIiIiIgoc8r2AXVERIQkJiaKubm5Rrq5ubmEhYWluV5kZKTky5dPDA0NpUmTJjJr1iypX7++1rzDhg2TyMhI5RUa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EhkZqbxCQ0M/27aJiIiIiIgoczLI6AJkB0ZGRh/dPJyIiIiIiIiyh2xdQ12oUCHR19eX8PBwjfTw8HAOOEZERERERET/SbYOqA0NDcXNzU1CQkKUtKSkJAkJCZEqVapkYMmIiIiIiIgoq8v2Tb4DAwOla9eu4u7uLh4eHjJ9+nSJiYkRf39/ERHp0qWLFCtWTIKCgkQkeSCzS5cuKf9/8OCBnDlzRvLlyyelSpXKsP0gIiIiIiKizCXbB9R+fn7y5MkTGTlypISFhYmLi4vs3LlTGajs3r17oqf3tqL+4cOHUrFiReXvyZMny+TJk6VWrVqyb9++9C4+ERERERERZVLZPqAWEQkICJCAgACty94Nkq2trQVAOpSKiIiIiIiIsrJs3YeaiIiIiIiI6EthQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkAwbURERERERERDpgQE1ERERERESkgxwTUM+ZM0esra3F2NhYPD095dixY+/Nv379eilbtqwYGxuLk5OT7NixI51KSkRERERERFlBjgio165dK4GBgTJq1Cg5deqUVKhQQby9veXx48da8x86dEjat28v33zzjZw+fVp8fHzEx8dHLly4kM4lJyIiIiIioszKIKMLkB6mTp0q3bt3F39/fxERmTdvnmzfvl0WL14sQ4cOTZV/xowZ0rBhQ/nhhx9EROTnn3+W3bt3y+zZs2XevHmp8sfFxUlcXJzyd2RkpIiIREVFfYnd+SyS4mIzughZwuf6DHm8P4zHOv18zmsTj/eH8dxOPzzW6YfXkfTFczv98Finn8wcK4m8LR+A92dENhcXFwd9fX388ccfGuldunRB8+bNta5jZWWFadOmaaSNHDkSzs7OWvOPGjUKIsIXX3zxxRdffPHFF1988cVXNnqFhoa+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\n"},"metadata":{}},{"name":"stdout","text":"\n=== Metrics Table (sorted by F1) ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                                 Precision  Recall      F1  ROC_AUC\nModel                                                              \nBoosting: RF (AdaBoost)             0.5759  0.6856  0.5640   0.7663\nBlending: GBM+Robust                0.5873  0.7312  0.5609   0.7776\nSVM (RBF)                           0.5681  0.6744  0.5448   0.7337\nChaining: GBM→Robust                0.6139  0.5308  0.5356   0.7330\nBoosting: NB (AdaBoost)             0.7861  0.5189  0.5125   0.7827\nEnsemble (LGBM+TabNet) – chosen     0.5767  0.5067  0.4917   0.7566\nCatBoost+MLP – chosen2              0.5180  0.5030  0.4886   0.7713\nBagging: KNN+RF                     0.4509  0.4984  0.4735   0.7403\nBagging: NB+CatBoost                0.5577  0.5846  0.2482   0.7566","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Precision</th>\n      <th>Recall</th>\n      <th>F1</th>\n      <th>ROC_AUC</th>\n    </tr>\n    <tr>\n      <th>Model</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Boosting: RF (AdaBoost)</th>\n      <td>0.5759</td>\n      <td>0.6856</td>\n      <td>0.5640</td>\n      <td>0.7663</td>\n    </tr>\n    <tr>\n      <th>Blending: GBM+Robust</th>\n      <td>0.5873</td>\n      <td>0.7312</td>\n      <td>0.5609</td>\n      <td>0.7776</td>\n    </tr>\n    <tr>\n      <th>SVM (RBF)</th>\n      <td>0.5681</td>\n      <td>0.6744</td>\n      <td>0.5448</td>\n      <td>0.7337</td>\n    </tr>\n    <tr>\n      <th>Chaining: GBM→Robust</th>\n      <td>0.6139</td>\n      <td>0.5308</td>\n      <td>0.5356</td>\n      <td>0.7330</td>\n    </tr>\n    <tr>\n      <th>Boosting: NB (AdaBoost)</th>\n      <td>0.7861</td>\n      <td>0.5189</td>\n      <td>0.5125</td>\n      <td>0.7827</td>\n    </tr>\n    <tr>\n      <th>Ensemble (LGBM+TabNet) – chosen</th>\n      <td>0.5767</td>\n      <td>0.5067</td>\n      <td>0.4917</td>\n      <td>0.7566</td>\n    </tr>\n    <tr>\n      <th>CatBoost+MLP – chosen2</th>\n      <td>0.5180</td>\n      <td>0.5030</td>\n      <td>0.4886</td>\n      <td>0.7713</td>\n    </tr>\n    <tr>\n      <th>Bagging: KNN+RF</th>\n      <td>0.4509</td>\n      <td>0.4984</td>\n      <td>0.4735</td>\n      <td>0.7403</td>\n    </tr>\n    <tr>\n      <th>Bagging: NB+CatBoost</th>\n      <td>0.5577</td>\n      <td>0.5846</td>\n      <td>0.2482</td>\n      <td>0.7566</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"# Part-44: Test Accuracy for all fitted models\n\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\n\n# Use the same test features you used for evaluation previously\nX_test_for_all = X_test_np  # already defined earlier\ny_test_for_all = y_test_np\n\n# Registry of models that should already be FITTED by earlier parts\n# (Only include the ones you actually fit on train in Parts 14, 19, 23, 25, 27, 30, 32, 38, 41)\n_models_fitted = []\n\ng = globals()\n\ndef _add_model_if_available(var_name, display_name):\n    if var_name in g:\n        est = g[var_name]\n        # quick sanity: est must have predict\n        if hasattr(est, \"predict\"):\n            _models_fitted.append((display_name, est))\n\n_add_model_if_available(\"chosen\",         \"Ensemble (LGBM+TabNet) – chosen\")\n_add_model_if_available(\"chosen2\",        \"CatBoost+MLP – chosen2\")\n_add_model_if_available(\"svm_rbf\",        \"SVM (RBF)\")\n_add_model_if_available(\"bag_knn_rf\",     \"Bagging: KNN+RF\")\n_add_model_if_available(\"boost_rf\",       \"Boosting: RF (AdaBoost)\")\n_add_model_if_available(\"bag_nb_total\",   \"Bagging: NB+CatBoost\")\n_add_model_if_available(\"boost_nb\",       \"Boosting: NB (AdaBoost)\")\n_add_model_if_available(\"blend_gbm_rob\",  \"Blending: GBM+Robust\")\n_add_model_if_available(\"chain_gbm_rob\",  \"Chaining: GBM→Robust\")\n\n# Compute Accuracy for each available/fitted model\nacc_rows = []  # (name, acc)\n\nfor name, est in _models_fitted:\n    try:\n        y_hat = est.predict(X_test_for_all)\n        acc = float(accuracy_score(y_test_for_all, y_hat))\n        print(f\"[{name}] Test Accuracy: {acc:.4f}\")\n        acc_rows.append((name, acc))\n    except Exception as e:\n        print(f\"[{name}] Skipped (prediction error: {e})\")\n\n# Summary sorted by Accuracy desc\nif acc_rows:\n    acc_rows_sorted = sorted(acc_rows, key=lambda t: t[1], reverse=True)\n    print(\"\\n=== Accuracy Summary (sorted) ===\")\n    for name, acc in acc_rows_sorted:\n        print(f\"{name:28s} | ACC: {acc:6.4f}\")\nelse:\n    print(\"No fitted models found for accuracy evaluation.\")\n\n# If df_metrics from Part-43 exists, append Accuracy column\nif \"df_metrics\" in g and isinstance(g[\"df_metrics\"], pd.DataFrame):\n    # df_metrics index are model display names; align and add\n    acc_map = dict(acc_rows)\n    # Only fill where names match\n    df_metrics[\"Accuracy\"] = df_metrics.index.map(lambda m: round(acc_map.get(m, np.nan), 4))\n    print(\"\\nUpdated df_metrics with Accuracy column:\")\n    display(df_metrics)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T23:54:37.663845Z","iopub.execute_input":"2025-08-21T23:54:37.664055Z","iopub.status.idle":"2025-08-21T23:54:39.288463Z","shell.execute_reply.started":"2025-08-21T23:54:37.664030Z","shell.execute_reply":"2025-08-21T23:54:39.287885Z"}},"outputs":[{"name":"stdout","text":"[Ensemble (LGBM+TabNet) – chosen] Test Accuracy: 0.8982\n[CatBoost+MLP – chosen2] Test Accuracy: 0.8914\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/collate.py:285: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /pytorch/torch/csrc/utils/tensor_numpy.cpp:203.)\n  return collate([torch.as_tensor(b) for b in batch], collate_fn_map=collate_fn_map)\n","output_type":"stream"},{"name":"stdout","text":"[SVM (RBF)] Test Accuracy: 0.6859\n[Bagging: KNN+RF] Test Accuracy: 0.8992\n[Boosting: RF (AdaBoost)] Test Accuracy: 0.7143\n[Bagging: NB+CatBoost] Test Accuracy: 0.2505\n[Boosting: NB (AdaBoost)] Test Accuracy: 0.9041\n[Blending: GBM+Robust] Test Accuracy: 0.6840\n[Chaining: GBM→Robust] Test Accuracy: 0.8933\n\n=== Accuracy Summary (sorted) ===\nBoosting: NB (AdaBoost)      | ACC: 0.9041\nBagging: KNN+RF              | ACC: 0.8992\nEnsemble (LGBM+TabNet) – chosen | ACC: 0.8982\nChaining: GBM→Robust         | ACC: 0.8933\nCatBoost+MLP – chosen2       | ACC: 0.8914\nBoosting: RF (AdaBoost)      | ACC: 0.7143\nSVM (RBF)                    | ACC: 0.6859\nBlending: GBM+Robust         | ACC: 0.6840\nBagging: NB+CatBoost         | ACC: 0.2505\n\nUpdated df_metrics with Accuracy column:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                                 Precision  Recall      F1  ROC_AUC  Accuracy\nModel                                                                        \nBoosting: RF (AdaBoost)             0.5759  0.6856  0.5640   0.7663    0.7143\nBlending: GBM+Robust                0.5873  0.7312  0.5609   0.7776    0.6840\nSVM (RBF)                           0.5681  0.6744  0.5448   0.7337    0.6859\nChaining: GBM→Robust                0.6139  0.5308  0.5356   0.7330    0.8933\nBoosting: NB (AdaBoost)             0.7861  0.5189  0.5125   0.7827    0.9041\nEnsemble (LGBM+TabNet) – chosen     0.5767  0.5067  0.4917   0.7566    0.8982\nCatBoost+MLP – chosen2              0.5180  0.5030  0.4886   0.7713    0.8914\nBagging: KNN+RF                     0.4509  0.4984  0.4735   0.7403    0.8992\nBagging: NB+CatBoost                0.5577  0.5846  0.2482   0.7566    0.2505","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Precision</th>\n      <th>Recall</th>\n      <th>F1</th>\n      <th>ROC_AUC</th>\n      <th>Accuracy</th>\n    </tr>\n    <tr>\n      <th>Model</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Boosting: RF (AdaBoost)</th>\n      <td>0.5759</td>\n      <td>0.6856</td>\n      <td>0.5640</td>\n      <td>0.7663</td>\n      <td>0.7143</td>\n    </tr>\n    <tr>\n      <th>Blending: GBM+Robust</th>\n      <td>0.5873</td>\n      <td>0.7312</td>\n      <td>0.5609</td>\n      <td>0.7776</td>\n      <td>0.6840</td>\n    </tr>\n    <tr>\n      <th>SVM (RBF)</th>\n      <td>0.5681</td>\n      <td>0.6744</td>\n      <td>0.5448</td>\n      <td>0.7337</td>\n      <td>0.6859</td>\n    </tr>\n    <tr>\n      <th>Chaining: GBM→Robust</th>\n      <td>0.6139</td>\n      <td>0.5308</td>\n      <td>0.5356</td>\n      <td>0.7330</td>\n      <td>0.8933</td>\n    </tr>\n    <tr>\n      <th>Boosting: NB (AdaBoost)</th>\n      <td>0.7861</td>\n      <td>0.5189</td>\n      <td>0.5125</td>\n      <td>0.7827</td>\n      <td>0.9041</td>\n    </tr>\n    <tr>\n      <th>Ensemble (LGBM+TabNet) – chosen</th>\n      <td>0.5767</td>\n      <td>0.5067</td>\n      <td>0.4917</td>\n      <td>0.7566</td>\n      <td>0.8982</td>\n    </tr>\n    <tr>\n      <th>CatBoost+MLP – chosen2</th>\n      <td>0.5180</td>\n      <td>0.5030</td>\n      <td>0.4886</td>\n      <td>0.7713</td>\n      <td>0.8914</td>\n    </tr>\n    <tr>\n      <th>Bagging: KNN+RF</th>\n      <td>0.4509</td>\n      <td>0.4984</td>\n      <td>0.4735</td>\n      <td>0.7403</td>\n      <td>0.8992</td>\n    </tr>\n    <tr>\n      <th>Bagging: NB+CatBoost</th>\n      <td>0.5577</td>\n      <td>0.5846</td>\n      <td>0.2482</td>\n      <td>0.7566</td>\n      <td>0.2505</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"# Part-45: ROC curves for all fitted models (binary & multiclass support)\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import label_binarize\nfrom sklearn.metrics import roc_curve, auc\n\n# Fallbacks if Part-44 vars aren't present (should be, but just in case)\ng = globals()\nX_test_for_all = g.get(\"X_test_for_all\", g.get(\"X_test_np\"))\ny_test_for_all = g.get(\"y_test_for_all\", g.get(\"y_test_np\"))\n_models_fitted = g.get(\"_models_fitted\", [])\n\nif X_test_for_all is None or y_test_for_all is None:\n    raise RuntimeError(\"Missing X_test_for_all / y_test_for_all. Run Part-44 first.\")\n\nif not _models_fitted:\n    print(\"No fitted models found in _models_fitted. Ensure Part-44 populated it.\")\nelse:\n    # Detect multiclass vs binary\n    classes_sorted = np.unique(y_test_for_all)\n    n_classes = len(classes_sorted)\n    is_multiclass_roc = n_classes > 2\n\n    # Prepare binarized labels for multiclass ROC\n    if is_multiclass_roc:\n        y_test_bin = label_binarize(y_test_for_all, classes=classes_sorted)  # shape: (n_samples, n_classes)\n\n    # Collect ROC data\n    roc_data = []  # list of dicts: {\"name\":..., \"fpr\":..., \"tpr\":..., \"auc\":...}\n\n    for name, est in _models_fitted:\n        if not hasattr(est, \"predict_proba\"):\n            print(f\"[{name}] Skipped: estimator has no predict_proba\")\n            continue\n        try:\n            proba = est.predict_proba(X_test_for_all)\n        except Exception as e:\n            print(f\"[{name}] Skipped (predict_proba error: {e})\")\n            continue\n\n        if proba.ndim == 1:\n            # Some rare estimators might output 1D probs; coerce to 2D [p0, p1]\n            proba = np.vstack([1.0 - proba, proba]).T\n\n        if is_multiclass_roc:\n            # Micro-average ROC (good single-curve comparison across models)\n            fpr, tpr, _ = roc_curve(y_test_bin.ravel(), proba.ravel())\n            roc_auc = auc(fpr, tpr)\n        else:\n            # Binary: positive class assumed as column 1\n            if proba.shape[1] == 1:\n                print(f\"[{name}] Skipped: single-column probabilities unexpected for binary.\")\n                continue\n            fpr, tpr, _ = roc_curve(y_test_for_all, proba[:, 1])\n            roc_auc = auc(fpr, tpr)\n\n        roc_data.append({\"name\": name, \"fpr\": fpr, \"tpr\": tpr, \"auc\": roc_auc})\n\n    if not roc_data:\n        print(\"No ROC data computed. Ensure models support predict_proba and Part-44 ran successfully.\")\n    else:\n        # Plot\n        plt.figure(figsize=(9, 7))\n        for item in roc_data:\n            plt.plot(item[\"fpr\"], item[\"tpr\"], linewidth=2, label=f'{item[\"name\"]} (AUC={item[\"auc\"]:.3f})')\n\n        # Chance line\n        plt.plot([0, 1], [0, 1], linestyle=\"--\", linewidth=1, label=\"Chance\")\n\n        title = \"ROC Curves (Micro-average OvR)\" if is_multiclass_roc else \"ROC Curves (Binary)\"\n        plt.title(title)\n        plt.xlabel(\"False Positive Rate\")\n        plt.ylabel(\"True Positive Rate\")\n        plt.legend(loc=\"lower right\", fontsize=8)\n        plt.grid(alpha=0.25)\n        plt.tight_layout()\n        plt.show()\n\n        # Optional: also compute and display Macro-AUC for multiclass (mean of per-class AUCs)\n        if is_multiclass_roc:\n            from sklearn.metrics import RocCurveDisplay\n\n            # Per-class macro AUC summary (no extra plot clutter)\n            macro_rows = []\n            for name, est in _models_fitted:\n                if not hasattr(est, \"predict_proba\"):\n                    continue\n                try:\n                    proba = est.predict_proba(X_test_for_all)\n                except Exception:\n                    continue\n\n                per_class_aucs = []\n                for i in range(n_classes):\n                    fpr_i, tpr_i, _ = roc_curve(y_test_bin[:, i], proba[:, i])\n                    per_class_aucs.append(auc(fpr_i, tpr_i))\n                macro_auc = float(np.mean(per_class_aucs))\n                macro_rows.append((name, macro_auc))\n\n            if macro_rows:\n                print(\"\\n=== Macro-AUC (mean of per-class AUCs) ===\")\n                for name, mauc in sorted(macro_rows, key=lambda t: t[1], reverse=True):\n                    print(f\"{name:28s} | Macro-AUC: {mauc:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T23:54:39.289142Z","iopub.execute_input":"2025-08-21T23:54:39.289415Z","iopub.status.idle":"2025-08-21T23:54:41.419956Z","shell.execute_reply.started":"2025-08-21T23:54:39.289385Z","shell.execute_reply":"2025-08-21T23:54:41.419249Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 900x700 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"# Part-46: Confusion matrices for all fitted models (raw + normalized)\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\n# Reuse variables from earlier parts\ng = globals()\nX_test_for_all = g.get(\"X_test_for_all\", g.get(\"X_test_np\"))\ny_test_for_all = g.get(\"y_test_for_all\", g.get(\"y_test_np\"))\n_models_fitted = g.get(\"_models_fitted\", [])\n\nif X_test_for_all is None or y_test_for_all is None:\n    raise RuntimeError(\"Missing X_test_for_all / y_test_for_all. Run Part-44 first.\")\n\nif not _models_fitted:\n    print(\"No fitted models found in _models_fitted. Ensure Part-44 populated it.\")\nelse:\n    classes_sorted = np.unique(y_test_for_all)\n    n_classes = len(classes_sorted)\n\n    def _safe_predict(est, X):\n        \"\"\"Predict class labels with graceful skipping on errors.\"\"\"\n        if not hasattr(est, \"predict\"):\n            return None, \"no predict() method\"\n        try:\n            return est.predict(X), None\n        except Exception as e:\n            return None, f\"prediction error: {e}\"\n\n    for name, est in _models_fitted:\n        y_hat, err = _safe_predict(est, X_test_for_all)\n        if err is not None:\n            print(f\"[{name}] Skipped ({err})\")\n            continue\n\n        # Raw confusion matrix\n        cm_raw = confusion_matrix(y_test_for_all, y_hat, labels=classes_sorted)\n        # Normalized per true class\n        cm_norm = confusion_matrix(y_test_for_all, y_hat, labels=classes_sorted, normalize=\"true\")\n\n        # --- Plot RAW ---\n        plt.figure(figsize=(6.5, 5.5))\n        disp_raw = ConfusionMatrixDisplay(confusion_matrix=cm_raw, display_labels=classes_sorted)\n        disp_raw.plot(values_format=\"d\", cmap=\"Blues\", colorbar=False)\n        plt.title(f\"Confusion Matrix (Raw) — {name}\")\n        plt.xlabel(\"Predicted label\")\n        plt.ylabel(\"True label\")\n        plt.xticks(rotation=30, ha=\"right\")\n        plt.tight_layout()\n        plt.show()\n\n        # --- Plot NORMALIZED ---\n        plt.figure(figsize=(6.5, 5.5))\n        disp_norm = ConfusionMatrixDisplay(confusion_matrix=cm_norm, display_labels=classes_sorted)\n        disp_norm.plot(values_format=\".2f\", cmap=\"Blues\", colorbar=False)\n        plt.title(f\"Confusion Matrix (Normalized) — {name}\")\n        plt.xlabel(\"Predicted label\")\n        plt.ylabel(\"True label\")\n        plt.xticks(rotation=30, ha=\"right\")\n        plt.tight_layout()\n        plt.show()\n\n    # Optional: compact text summary of per-class accuracy (diagonal of normalized CM)\n    print(\"\\n=== Per-class recall (diagonal of normalized confusion matrix) ===\")\n    for name, est in _models_fitted:\n        y_hat, err = _safe_predict(est, X_test_for_all)\n        if err is not None:\n            continue\n        cm_norm = confusion_matrix(y_test_for_all, y_hat, labels=classes_sorted, normalize=\"true\")\n        diag = np.diag(cm_norm)\n        diag_str = \" | \".join([f\"class {c}: {v:.3f}\" for c, v in zip(classes_sorted, diag)])\n        print(f\"{name:28s} -> {diag_str}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T23:54:41.420822Z","iopub.execute_input":"2025-08-21T23:54:41.421081Z","iopub.status.idle":"2025-08-21T23:54:46.407615Z","shell.execute_reply.started":"2025-08-21T23:54:41.421052Z","shell.execute_reply":"2025-08-21T23:54:46.406992Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAbcAAAHWCAYAAAD0P8cUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA6/UlEQVR4nO3de3zO9f/H8ee1za7Nzs4WJpbDmkgHodkUSRFJ5fQ1Qn2lEin5FjaKvuQsh8gxpaRER3JW+kbhqxznnDNjM4zZ3r8//HZ9XbaxzTUXH4/77bbbzfX+nF6fy3Vdz+vz/rw/18dmjDECAMBCPNxdAAAArka4AQAsh3ADAFgO4QYAsBzCDQBgOYQbAMByCDcAgOUQbgAAyyHcAACWQ7gVsO3bt+uRRx5RUFCQbDab5s2b59L17969WzabTdOmTXPpem9mMTExiomJcek69+3bJx8fH/38888uXa+rtGrVSs8884y7y7hpxMXFyWazubsMFKBbItx27NihF154QRUqVJCPj48CAwNVt25djRo1SmfPni3QbcfGxmrjxo169913NXPmTN17770Fur3rqUOHDrLZbAoMDMz2edy+fbtsNptsNpvef//9PK//wIEDiouL0/r1611Q7bUZMGCAatWqpbp16zraMvc/889ut6tSpUrq16+fUlNTr2t9vXv31ty5c7Vhw4brut3LXfp82Gw2+fn5KSIiQu+8847OnDnj1tpudOXLl1eTJk2ytM+cOVOenp569NFHHa+rzOd32LBhWeafNm2abDab1q5d62jLDPOSJUtm+/+Q07bzKvPLduafh4eHihQposaNG2v16tVZ5s+sK7u/CRMmXFMtXte09E3g22+/1dNPPy273a727dsrMjJS58+f16pVq/T666/rr7/+0ocfflgg2z579qxWr16tt956Sy+99FKBbCMsLExnz55VoUKFCmT9V+Pl5aUzZ85owYIFWY4cZs2aJR8fn3x/0B84cEDx8fEqX768atSokevlFi5cmK/t5eTo0aOaPn26pk+fnmWa3W7X5MmTJUlJSUn6+uuvNXDgQO3YsUOzZs1yaR1Xcvfdd+vee+/VsGHDNGPGjOu23ew0bNhQ7du3lySlpKRo5cqV6tu3rzZs2KA5c+a4tbZMb7/9tt588013l3FVs2bNUocOHdSgQQPNmzdPPj4+TtOHDh2qrl27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ph5++GG1aNFCLVu2dIRDdvshSZUrV84yrWrVqvrxxx91+vRp+fn5Odov35fMD/ITJ044nsereeyxxxQQEKDPPvtM69ev13333afw8PBsu0EzMjI0atQojRs3Trt27XJ0FUpS0aJFc7U9Sbrtttvk7e2d6/nff/99ff3111q/fr0++eQTlShRItfLmhxuWO/j46MFCxZIkv7++28NGTJER44cyfLBdPbsWQ0ePFhTp07V/v37ndaXlJTk+HdmYK1cuVJlypTRunXr9M4776h48eKOyylWrlypwMBAVa9ePds6r3b9VmJios6fP5+Lvc6qSJEiV33Oy5QpowYNGjgeP/HEEypatKh69eqlb775Rk2bNpUk7d27V/369dP8+fOzvG8yn5PM1/Pl78vMtku/GOzZs0elS5fOMnIwu2VzcrX39ZEjR3T27Nkc67lWDz/8sMqVK6fx48erSJEiGjVq1FWXuTSsLv+impO4uDhFR0drwoQJ6tGjR7bz3H333Vk+96SLX+Qv1b9/f8XFxTm1Pf/883r66aeVmpqqJUuWaPTo0U7v8+z2oVixYrmqPbcsHW6hoaH6888/87Rcbi/s9PT0zLY9pw/B3Gzj8v98X19frVixQkuXLtW3336rH374QZ999pkeeughLVy4MMca8upa9iWT3W5XixYtNH36dO3cuTPLi/1SgwYNUt++ffXcc89p4MCBKlKkiDw8PPTqq6/m+ghVUq6/2WZat26djhw5IknauHGjWrdufdVlMsM2py8tnp6eTh/kjRo1UpUqVfTCCy9o/vz5jvaXX35ZU6dO1auvvqratWs7Lupv1aqV0z6Hhobq9ttv14oVK1S+fHkZY1S7dm0VL15c3bt31549e7Ry5UrVqVMn2y84J06c0B133HHFfWrRooWWL19+1X3PztKlS/N1gfzDDz8sSVqxYoWaNm2q9PR0NWzYUImJierdu7eqVKkiPz8/7d+/Xx06dMjT68CVXPFeuFZjx47ViRMnNHr0aIWEhFzxvZSpf//+iomJ0cSJEx09PldSr149xcTEXDEQZ82a5XRkt3DhQg0dOjTLgKUKFSpkWfaOO+5wvC+aNGkiT09Pvfnmm6pfv/51u9bXsuEmXXxSP/zwQ61evVq1a9e+4rxhYWHKyMjQ9u3bVbVqVUf74cOHdfLkScfIR1cICQlxGlmYKbtvSR4e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gLwi3HDLqV+/vsaPHy9vb2+FhobKy8v5beDn5+f0OCUlRffcc49mzZqVZV3FixfPVw35uUdYSkqKJOnbb791ChXp4nlEV1m9erXatm2r+Ph4NWrUSEFBQZo9e7aGDRuW51onTZqUJWw9PT1dViuQE8INtxw/Pz+Fh4fnev6aNWvqs88+U4kSJbIcvWQqXbq0/vOf/6hevXqSLh6h/P7776pZs2a281erVk0ZGRlavny5GjRokGV65pFjenq6oy0iIkJ2u1179+7N8YivatWqjsExmX799der7+QlfvnlF4WFhemtt95ytO3ZsyfLfHv37tWBAwcUGhrq2I6Hh4cqV66skiVLKjQ0VDt37lTbtm3ztH3AFRhQAlxF27ZtVaxYMTVr1kwrV67Url27tGzZMr3yyiv6+++/JUndu3fXe++9p3nz5mnLli168cUXr3iNWvny5RUbG6vnnntO8+bNc6zz888/lySFhYXJZrPpm2++0dGjR5WSkqKAgAD16tVLPXr00PTp07Vjxw798ccfGjNmjGOQxj//+U9t375dr7/+urZu3apPPvlE06ZNy9P+3nHHHdq7d69mz56tHTt2aPTo0dkOjvHx8VFsbKw2bNiglStX6pVXXtEzzzyjUqVKSZLi4+M1ePBgjR49Wtu2bdPGjRs1depUDR8+PE/1APni7pN+wPV06YCSvEw/ePCgad++vSlWrJix2+2mQoUKpkuXLiYpKckYc3EASffu3U1gYKAJDg42PXv2NO3bt89xQIkxxpw9e9b06NHDlC5d2nh7e5vw8HAzZcoUx/QBAwaYUqVKGZvNZmJjY40xFwfBjBw50lSuXNkUKlTIFC9e3DRq1MgsX77csdyCBQtMeHi4sdvtJioqykyZMiXPA0pef/11U7RoUePv72+effZZM2LECBMUFOSY3r9/f1O9enUzbtw4Exoaanx8fEzLli1NYmKi03pnzZplatSoYby9vU1ISIipV6+e+fLLL40xDChBwbIZk8MZbwAAblJ0SwIALIdwAwBYDuEGALAcwg0AYDmEGwDAcgg3AIDlEG4AAMsh3AAAlkO4AQAsh3ADAFgO4QYAsBzCDQBgOf8HbpH3cpDupZMAAAAASUVORK5CYII=\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 650x550 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n=== Per-class recall (diagonal of normalized confusion matrix) ===\nEnsemble (LGBM+TabNet) – chosen -> class 0: 0.993 | class 1: 0.020\nCatBoost+MLP – chosen2       -> class 0: 0.986 | class 1: 0.020\nSVM (RBF)                    -> class 0: 0.689 | class 1: 0.660\nBagging: KNN+RF              -> class 0: 0.997 | class 1: 0.000\nBoosting: RF (AdaBoost)      -> class 0: 0.721 | class 1: 0.650\nBagging: NB+CatBoost         -> class 0: 0.169 | class 1: 1.000\nBoosting: NB (AdaBoost)      -> class 0: 0.998 | class 1: 0.040\nBlending: GBM+Robust         -> class 0: 0.672 | class 1: 0.790\nChaining: GBM→Robust         -> class 0: 0.982 | class 1: 0.080\n\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.124889 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000137 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.116016 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.119831 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.160639 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.081971 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.097928 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.143824 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.126514 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 892\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.129866 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.106959 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 254, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.117837 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 318, number of negative: 2952\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.118990 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 897\n[LightGBM] [Info] Number of data points in the train set: 3270, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.128741 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.121959 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.142972 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.107858 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 895\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2361\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.106990 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 893\n[LightGBM] [Info] Number of data points in the train set: 2616, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.082993 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000118 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 255, number of negative: 2362\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000121 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 892\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Number of positive: 256, number of negative: 2361\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000114 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 894\n[LightGBM] [Info] Number of data points in the train set: 2617, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n[LightGBM] [Info] Start training from score 0.000000\n[LightGBM] [Info] Number of positive: 319, number of negative: 2952\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000127 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 896\n[LightGBM] [Info] Number of data points in the train set: 3271, number of used features: 20\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n","output_type":"stream"}],"execution_count":47}]}